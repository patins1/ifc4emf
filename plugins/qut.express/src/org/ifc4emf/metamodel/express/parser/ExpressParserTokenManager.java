/* Generated By:JJTree&JavaCC: Do not edit this line. ExpressParserTokenManager.java */
package org.ifc4emf.metamodel.express.parser;
import java.util.List;
import java.util.ArrayList;

import org.ifc4emf.metamodel.express.core.*;

/** Token Manager. */
@SuppressWarnings("all")
public class ExpressParserTokenManager implements ExpressParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x1000L) != 0L)
            return 6;
         if ((active2 & 0x800000000L) != 0L)
            return 0;
         if ((active2 & 0x400000000L) != 0L)
            return 31;
         if ((active0 & 0xffffffffffffff00L) != 0L || (active1 & 0x7fffffffffffffffL) != 0L)
         {
            jjmatchedKind = 137;
            return 21;
         }
         return -1;
      case 1:
         if ((active0 & 0xfff07ffffefcff00L) != 0L || (active1 & 0x7ffffffefffffd6fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 137;
               jjmatchedPos = 1;
            }
            return 21;
         }
         if ((active0 & 0xf800001030000L) != 0L || (active1 & 0x100000290L) != 0L)
            return 21;
         return -1;
      case 2:
         if ((active0 & 0xfc00032150086300L) != 0L || (active1 & 0x1fffa58040c0000dL) != 0L)
            return 21;
         if ((active0 & 0x3fe7cdeaef69c00L) != 0L || (active1 & 0x60005a7ebf3ffd62L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 137;
               jjmatchedPos = 2;
            }
            return 21;
         }
         return -1;
      case 3:
         if ((active0 & 0x1060040082060400L) != 0L || (active1 & 0xe86241000L) != 0L)
            return 21;
         if ((active0 & 0xab9e7ade2cf0da00L) != 0L || (active1 & 0x7fffdb70391bed62L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 137;
               jjmatchedPos = 3;
            }
            return 21;
         }
         return -1;
      case 4:
         if ((active0 & 0x219e7a1e2ce00a00L) != 0L || (active1 & 0x1fffc138391be542L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 137;
               jjmatchedPos = 4;
            }
            return 21;
         }
         if ((active0 & 0x8a0000c00010d000L) != 0L || (active1 & 0x60001a4000000820L) != 0L)
            return 21;
         return -1;
      case 5:
         if ((active0 & 0x12021a20200000L) != 0L || (active1 & 0x2001180919c002L) != 0L)
            return 21;
         if ((active0 & 0x218c78040cc00a00L) != 0L || (active1 & 0x7fdfc02030022540L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 5;
            return 21;
         }
         return -1;
      case 6:
         if ((active0 & 0x218c700008c00000L) != 0L || (active1 & 0x402010020000L) != 0L)
            return 21;
         if ((active0 & 0x80404000a00L) != 0L || (active1 & 0x7fdf800020002540L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 6;
            return 21;
         }
         return -1;
      case 7:
         if ((active0 & 0x400000800L) != 0L || (active1 & 0x4bde800020002500L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 7;
            return 21;
         }
         if ((active0 & 0x80004000200L) != 0L || (active1 & 0x3401000000000040L) != 0L)
            return 21;
         return -1;
      case 8:
         if ((active0 & 0x400000000L) != 0L || (active1 & 0x4b1e000000000000L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 8;
            return 21;
         }
         if ((active0 & 0x800L) != 0L || (active1 & 0xc0800020002500L) != 0L)
            return 21;
         return -1;
      case 9:
         if ((active1 & 0xa08000000000000L) != 0L)
            return 21;
         if ((active0 & 0x400000000L) != 0L || (active1 & 0x4116000000000000L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 9;
            return 21;
         }
         return -1;
      case 10:
         if ((active1 & 0x4112000000000000L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 10;
            return 21;
         }
         if ((active0 & 0x400000000L) != 0L || (active1 & 0x4000000000000L) != 0L)
            return 21;
         return -1;
      case 11:
         if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 11;
            return 21;
         }
         if ((active1 & 0x4012000000000000L) != 0L)
            return 21;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStartNfaWithStates_0(0, 140, 6);
      case 41:
         return jjStopAtPos(0, 141);
      case 42:
         jjmatchedKind = 164;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10000000L);
      case 43:
         return jjStartNfaWithStates_0(0, 162, 31);
      case 44:
         return jjStopAtPos(0, 148);
      case 45:
         return jjStartNfaWithStates_0(0, 163, 0);
      case 46:
         return jjStopAtPos(0, 149);
      case 47:
         return jjStopAtPos(0, 165);
      case 58:
         jjmatchedKind = 147;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x300400000L);
      case 59:
         return jjStopAtPos(0, 146);
      case 60:
         jjmatchedKind = 152;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8042000000L);
      case 61:
         return jjStopAtPos(0, 159);
      case 62:
         jjmatchedKind = 151;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000L);
      case 63:
         return jjStopAtPos(0, 155);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x7ff00L, 0x0L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x1f80000L, 0x0L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x1e000000L, 0x400000000000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x60000000L, 0x0L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x3f80000000L, 0x1fff800000000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0xfc000000000L, 0x0L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x600000000000L, 0x0L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0xf800000000000L, 0x0L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x3ff0000000000000L, 0x0L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0xc000000000000000L, 0x0L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1f8L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600L, 0x0L);
      case 81:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7f000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3ff80000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfc0000000L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1f000000000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6000060000000000L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x180000000000L, 0x0L);
      case 88:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 144);
      case 92:
         return jjStopAtPos(0, 157);
      case 93:
         return jjStopAtPos(0, 145);
      case 123:
         return jjStopAtPos(0, 142);
      case 124:
         jjmatchedKind = 168;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000000L);
      case 125:
         return jjStopAtPos(0, 143);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 156);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 167);
         break;
      case 60:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x100000000L);
      case 61:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 153);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 154);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x200000000L);
      case 62:
         if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 158);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x4002080000L, active1, 0x6000060040000000L, active2, 0L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x300L, active1, 0L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0x80000L, active2, 0L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x10100020100000L, active1, 0x71f000L, active2, 0L);
      case 70:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 47, 21);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(1, 68, 21);
         break;
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0L, active2, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x180080000000L, active2, 0L);
      case 73:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 73, 21);
         return jjMoveStringLiteralDfa2_0(active0, 0x60608040200000L, active1, 0x1800000L, active2, 0L);
      case 75:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x80401000L, active1, 0L, active2, 0L);
      case 78:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xe000700006000L, active1, 0x1fff807000000020L, active2, 0L);
      case 79:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 96, 21);
         return jjMoveStringLiteralDfa2_0(active0, 0xff8003001c800000L, active1, 0x600000020001L, active2, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 81:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000L, active2, 0L);
      case 82:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 71, 21);
         return jjMoveStringLiteralDfa2_0(active0, 0x40000008000L, active1, 0x200000400L, active2, 0L);
      case 83:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800020000L, active1, 0x18000000000L, active2, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0x8000100L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0x30040802L, active2, 0L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000L, active1, 0L, active2, 0L);
      case 89:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 24, 21);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc00000000L, active2, 0L);
      case 124:
         if ((active2 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 166);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 58:
         if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(2, 161);
         break;
      case 62:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x100000000L);
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0x1000L, active2, 0L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x80200000000000L, active1, 0x10000000L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000800000000L, active1, 0L, active2, 0L);
      case 68:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 67, 21);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000004000L, active1, 0x1fff800000000000L, active2, 0L);
      case 69:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0x90080000820L, active2, 0L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000L, active2, 0L);
      case 71:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 21);
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x3800000000100800L, active1, 0L, active2, 0L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80100L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x100401000021000L, active1, 0x101002000000L, active2, 0L);
      case 75:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0x2000000000L, active2, 0L);
      case 76:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 21);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0x6000020000360000L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4002L, active2, 0L);
      case 78:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 87, 21);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 94, 21);
         return jjMoveStringLiteralDfa3_0(active0, 0x1018000c200000L, active1, 0x400000000000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000800400L, active1, 0x400L, active2, 0L);
      case 80:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 21);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xc20008000L, active2, 0L);
      case 82:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 106, 21);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 109, 21);
         return jjMoveStringLiteralDfa3_0(active0, 0x20020008000L, active1, 0xc000000L, active2, 0L);
      case 83:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 21);
         return jjMoveStringLiteralDfa3_0(active0, 0x42000082000200L, active1, 0L, active2, 0L);
      case 84:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 64, 21);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 86, 21);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000200000000L, active1, 0x4000010040L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0x200000000L, active2, 0L);
      case 86:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 21);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 90:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 50:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 21);
         break;
      case 58:
         if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(3, 160);
         break;
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000800209000L, active1, 0L, active2, 0L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0x400L, active2, 0L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 69:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 21);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 21);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 21);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 82, 21);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 97, 21);
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800e108000000000L, active1, 0x8211aa100L, active2, 0L);
      case 70:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 85, 21);
         break;
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000220100000L, active1, 0x4008000040L, active2, 0L);
      case 76:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 21);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0x100000000000L, active2, 0L);
      case 77:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 21);
         return jjMoveStringLiteralDfa4_0(active0, 0x20400000000L, active1, 0L, active2, 0L);
      case 78:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 21);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 21);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 95, 21);
         return jjMoveStringLiteralDfa4_0(active0, 0x100400000400000L, active1, 0x2000000000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x80200000004000L, active1, 0x4020L, active2, 0L);
      case 80:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 89, 21);
         break;
      case 81:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L, active1, 0x80000000800L, active2, 0L);
      case 83:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 21);
         return jjMoveStringLiteralDfa4_0(active0, 0x5004000000L, active1, 0x400000000000L, active2, 0L);
      case 84:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 21);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 90, 21);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000200L, active1, 0x10000000L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x6000020000010000L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1fff800000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 21);
         break;
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0x800000008000L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0x7000000100000L);
      case 68:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 21);
         return jjMoveStringLiteralDfa5_0(active0, 0x100400000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 21);
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 107, 21);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 108, 21);
         return jjMoveStringLiteralDfa5_0(active0, 0x408800800L, active1, 0x6008000000000402L);
      case 70:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 21);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000000L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000400000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20010000000000L);
      case 76:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 21);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 21);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 102, 21);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000000000L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000080000L);
      case 78:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 21);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2801000040L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0x100000000000000L);
      case 82:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 21);
         return jjMoveStringLiteralDfa5_0(active0, 0xa100000200200L, active1, 0x600000020012100L);
      case 83:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 21);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000020000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x10081204000000L, active1, 0x1000400000000000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x80200000000000L, active1, 0x1000000000L);
      case 86:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0x4000L);
      case 89:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 21);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 75, 21);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 83, 21);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000004800200L, active1, 0x1000000000000L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000000000L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400L);
      case 69:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 21);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 21);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 21);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 100, 21);
         return jjMoveStringLiteralDfa6_0(active0, 0x104400000000000L, active1, 0x200000000002000L);
      case 70:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 21);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 99, 21);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 117, 21);
         break;
      case 71:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 91, 21);
         return jjMoveStringLiteralDfa6_0(active0, 0x800L, active1, 0L);
      case 72:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 21);
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x180000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000000L);
      case 78:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 80, 21);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 104, 21);
         return jjMoveStringLiteralDfa6_0(active0, 0x80200000000000L, active1, 0x8000000000040L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xc6000000020000L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000L);
      case 82:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 21);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0x100000000000000L);
      case 83:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 21);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0L);
      case 84:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 21);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 21);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 21);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 21);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0x20000000L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x410000000000000L);
      case 87:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000100L);
      case 88:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0L);
      case 89:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 21);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 21);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000000000L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x6000400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000800L, active1, 0x40L);
      case 67:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 21);
         return jjMoveStringLiteralDfa7_0(active0, 0x200L, active1, 0x40000000000000L);
      case 68:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 21);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 21);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000000000L);
      case 69:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 21);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 92, 21);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 110, 21);
         break;
      case 70:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 81, 21);
         break;
      case 72:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 21);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000000000000L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000800000000100L);
      case 76:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 61, 21);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000000000L);
      case 78:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 21);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 101, 21);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L, active1, 0x16000000002000L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0x100000000000000L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1200000000000000L);
      case 82:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 21);
         break;
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000000L);
      case 84:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 21);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000000L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000000400L);
      case 88:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 21);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 21);
         break;
      case 89:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40800000000000L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x110000000002000L);
      case 69:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 112, 21);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 122, 21);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 124, 21);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xa80000000000000L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000L);
      case 76:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 21);
         break;
      case 78:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 43, 21);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 125, 21);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000000000L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400L);
      case 83:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000100L);
      case 84:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 9, 21);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 21);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000800L, active1, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000000000000L);
      case 69:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 11, 21);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 72, 21);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 74, 21);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 77, 21);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 93, 21);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x104000000000000L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L, active1, 0x4000000000000000L);
      case 76:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 118, 21);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 119, 21);
         break;
      case 77:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000000000000L);
      case 83:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 111, 21);
         break;
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1a000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 123, 21);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000000000L);
      case 68:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000000000000L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000000000000L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000L, active1, 0L);
      case 81:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000000000000L);
      case 84:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 121, 21);
         break;
      case 88:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000000000L);
      case 89:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 115, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(10, 34, 21);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000000000L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10000000000000L);
      case 84:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 114, 21);
         break;
      case 85:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4100000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 69:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 126, 21);
         break;
      case 78:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 116, 21);
         break;
      case 82:
         return jjMoveStringLiteralDfa12_0(active1, 0x100000000000000L);
      case 84:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 113, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(10, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 69:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 120, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 31;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  else if (curChar == 37)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAdd(19);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 6;
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAdd(23);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  else if (curChar == 45)
                     jjCheckNAddStates(6, 8);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAdd(23);
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 42)
                     jjCheckNAddStates(9, 11);
                  break;
               case 9:
                  if ((0xfffff9ffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 10:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 11:
                  if (curChar == 41 && kind > 7)
                     kind = 7;
                  break;
               case 12:
                  if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 13:
                  if (curChar == 39)
                     jjCheckNAddStates(3, 5);
                  break;
               case 14:
                  if ((0xffffff7b00000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 16:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 17:
                  if (curChar == 39 && kind > 133)
                     kind = 133;
                  break;
               case 18:
                  if (curChar != 37)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAdd(19);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 22:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(23);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if (curChar != 46)
                     break;
                  if (kind > 131)
                     kind = 131;
                  jjCheckNAddTwoStates(26, 27);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 131)
                     kind = 131;
                  jjCheckNAddTwoStates(26, 27);
                  break;
               case 28:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 131)
                     kind = 131;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjCheckNAdd(21);
                  break;
               case 1:
                  jjAddStates(6, 8);
                  break;
               case 7:
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
               case 10:
                  jjCheckNAddTwoStates(10, 8);
                  break;
               case 14:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 15:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjCheckNAdd(21);
                  break;
               case 27:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(12, 13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(6, 8);
                  break;
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(10, 8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 31 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   23, 24, 25, 14, 15, 17, 1, 2, 4, 8, 9, 11, 28, 29, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\101\102\123", 
"\101\102\123\124\122\101\103\124", "\101\103\117\123", "\101\107\107\122\105\107\101\124\105", 
"\101\114\111\101\123", "\101\116\104", "\101\116\104\117\122", "\101\122\122\101\131", "\101\123", 
"\101\123\111\116", "\101\124\101\116", "\102\101\107", "\102\105\107\111\116", 
"\102\111\116\101\122\131", "\102\114\105\116\107\124\110", "\102\117\117\114\105\101\116", "\102\131", 
"\103\101\123\105", "\103\117\116\123\124\101\116\124", "\103\117\116\124\105\130\124", 
"\103\117\123", "\104\105\122\111\126\105", "\104\111\126", "\105\114\123\105", 
"\105\116\104", "\105\116\124\111\124\131", "\105\116\125\115\105\122\101\124\111\117\116", 
"\105\123\103\101\120\105", "\105\130\111\123\124\123", "\105\130\120", "\106\101\114\123\105", 
"\106\111\130\105\104", "\106\117\122", "\106\117\122\115\101\124", "\106\122\117\115", 
"\106\125\116\103\124\111\117\116", "\107\105\116\105\122\111\103", "\110\111\102\117\125\116\104", 
"\110\111\111\116\104\105\130", "\111\106", "\111\116", "\111\116\123\105\122\124", 
"\111\116\124\105\107\105\122", "\111\116\126\105\122\123\105", "\114\105\116\107\124\110", 
"\114\111\113\105", "\114\111\123\124", "\114\117\102\117\125\116\104", 
"\114\117\111\116\104\105\130", "\114\117\103\101\114", "\114\117\107", "\114\117\107\61\60", 
"\114\117\107\62", "\114\117\107\111\103\101\114", "\115\117\104", "\115\117\104\105\114", 
"\116\117\124", "\116\125\115\102\105\122", "\116\126\114", "\117\104\104", "\117\106", 
"\117\116\105\117\106", "\117\120\124\111\117\116\101\114", "\117\122", 
"\117\124\110\105\122\127\111\123\105", "\120\111", "\120\122\117\103\105\104\125\122\105", "\121\125\105\122\131", 
"\122\105\101\114", "\122\105\106\105\122\105\116\103\105", "\122\105\115\117\126\105", 
"\122\105\120\105\101\124", "\122\105\124\125\122\116", "\122\117\114\105\123\117\106", 
"\122\125\114\105", "\123\103\110\105\115\101", "\123\105\114\105\103\124", "\123\105\114\106", 
"\123\105\124", "\123\111\116", "\123\111\132\105\117\106", "\123\113\111\120", 
"\123\121\122\124", "\123\124\122\111\116\107", "\123\125\102\124\131\120\105", 
"\123\125\120\105\122\124\131\120\105", "\124\101\116", "\124\110\105\116", "\124\117", "\124\122\125\105", 
"\124\131\120\105", "\124\131\120\105\117\106", "\125\116\111\121\125\105", 
"\125\116\113\116\117\127\116", "\125\116\124\111\114", "\125\123\105", "\125\123\105\104\111\116", 
"\126\101\114\125\105", "\126\101\122", "\127\110\105\122\105", "\127\110\111\114\105", 
"\130\117\122", "\103\117\116\123\124\137\105", "\105\116\104\137\101\114\111\101\123", 
"\105\116\104\137\103\101\123\105", "\105\116\104\137\103\117\116\123\124\101\116\124", 
"\105\116\104\137\103\117\116\124\105\130\124", "\105\116\104\137\105\116\124\111\124\131", 
"\105\116\104\137\106\125\116\103\124\111\117\116", "\105\116\104\137\111\106", "\105\116\104\137\114\117\103\101\114", 
"\105\116\104\137\115\117\104\105\114", "\105\116\104\137\120\122\117\103\105\104\125\122\105", 
"\105\116\104\137\122\105\120\105\101\124", "\105\116\104\137\122\125\114\105", 
"\105\116\104\137\123\103\110\105\115\101", "\105\116\104\137\124\131\120\105", "\126\101\114\125\105\137\111\116", 
"\126\101\114\125\105\137\125\116\111\121\125\105", null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\50", "\51", "\173", "\175", "\133", "\135", "\73", "\72", "\54", "\56", "\72\75", 
"\76", "\74", "\74\75", "\76\75", "\77", "\52\52", "\134", "\74\76", "\75", 
"\72\74\76\72", "\72\75\72", "\53", "\55", "\52", "\57", "\174\174", "\74\52", "\174", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0xffffffffffffffffL, 0x1fffffff328L, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xc0L, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[31];
private final int[] jjstateSet = new int[62];
protected char curChar;
/** Constructor. */
public ExpressParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ExpressParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 31; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
