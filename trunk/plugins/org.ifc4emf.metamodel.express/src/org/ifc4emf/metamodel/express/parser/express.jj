/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. express.jj */
/*@egen*//***************************************************************************************************************************************
** DESCRIPTION: EXPRESS Grammar and Scanner to be used with JavaCC
** FILENAME:    ExpressParser.jj
** DATE:        MAR 1998 - <jag164@psu.edu>                (Initial grammar)
** UPDATE:	OCT 1998 - <Singva.Ma@leg.ensieg.inpg.fr>  (Production 294 correction)
** 
** Contributed by Jason Goodman - jag164@hotmail.com
*************************************************************************************************************************************/

options {
        LOOKAHEAD = 2;
        //STATIC = false;
        //DEBUG_PARSER = true;
        FORCE_LA_CHECK = true;
}

PARSER_BEGIN(ExpressParser)
package org.ifc4emf.metamodel.express.parser;

import org.ifc4emf.metamodel.express.core.*;
import java.util.List;
import java.util.ArrayList;

public class ExpressParser/*@bgen(jjtree)*/implements ExpressParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTExpressParserState jjtree = new JJTExpressParserState();

/*@egen*/

        
        // 
        // MAIN class used for command line parsing
        //
        public static void main(String args[]) {
                
                ExpressParser parser;
                String outFile;
                                
                if (args.length == 0) {
                        System.out.println("ExpressParser:  Reading from standard input . . .");
                        parser = new ExpressParser(System.in);
                        outFile = "out.express";
                } 
                else if (args.length == 1) {
                        System.out.println("ExpressParser:  Reading from file " + args[0] + " . . .");
                        try {
                          		String fileName = args[0];
                          		outFile = fileName.substring(0,fileName.length()-5);
                                parser = new ExpressParser(new java.io.FileInputStream(fileName)
                              );
                        } 
                        catch (java.io.FileNotFoundException e) {
                                System.out.println("Express Parser:  File " + args[0] + " not found.");
                                return;
                        }                       
                } 
                else {
                        System.out.println("ExpressParser:  Usage is one of:");
                        System.out.println("         java ExpressParser < inputfile");
                        System.out.println("OR");
                        System.out.println("         java ExpressParser inputfile");
                        return;
                }
                try {
                        ASTsyntax s = 
                        parser.syntax();
                                System.out.println("ExpressParser: source parsed successfully.");
                        
                } 
                catch (ParseException e) {
                        System.out.println(e.getMessage());
                        System.out.println("ExpressParser:  Encountered errors during parse.");
                }
        } // end main

} // end class ExpressParser

PARSER_END(ExpressParser)



/************************************************
*************************************************
** Tokens
*************************************************
************************************************/

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}



SPECIAL_TOKEN : /* COMMENTS */
{
  <TAIL_REMARK: "--" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <EMBEDDED_REMARK: "(*" (~["*"])* "*" ("*" | (~["*",")"] (~["*"])* "*"))* ")">
}


TOKEN : {
        <ABS: "ABS">
|       <ABSTRACT: "ABSTRACT">
|       <ACOS: "ACOS">
|       <AGGREGATE: "AGGREGATE">
|       <ALIAS: "ALIAS">
|       <AND: "AND">
|       <ANDOR: "ANDOR">
|       <ARRAY: "ARRAY">
|       <AS: "AS">
|       <ASIN: "ASIN">
|       <ATAN: "ATAN">
|       <BAG: "BAG">
|       <BEGIN: "BEGIN">
|       <BINARY: "BINARY">
|       <BLENGTH: "BLENGTH">
|       <BOOLEAN: "BOOLEAN">
|       <BY: "BY">
|       <CASE: "CASE">
|       <CONSTANT: "CONSTANT">
|       <CONTEXT: "CONTEXT">
|       <COS: "COS">
|       <DERIVE: "DERIVE">
|       <DIV: "DIV">
|       <ELSE: "ELSE">
|       <END: "END">
|       <ENTITY: "ENTITY">
|       <ENUMERATION: "ENUMERATION">
|       <ESCAPE: "ESCAPE">
|       <EXISTS: "EXISTS">
|       <EXP: "EXP">
|       <FALSE: "FALSE">
|       <FIXED: "FIXED">
|       <FOR: "FOR">
|       <FORMAT: "FORMAT">
|       <FROM : "FROM">
|       <FUNCTION: "FUNCTION">
|       <GENERIC: "GENERIC">
|       <HIBOUND: "HIBOUND">
|       <HIINDEX: "HIINDEX">
|       <IF: "IF">
|       <IN: "IN">
|       <INSERT: "INSERT">
|       <INTEGER: "INTEGER">
|       <INVERSE: "INVERSE">
|       <LENGTH: "LENGTH">
|       <LIKE: "LIKE">
|       <LIST: "LIST">
|       <LOBOUND: "LOBOUND">
|       <LOINDEX: "LOINDEX">
|       <LOCAL: "LOCAL">
|       <LOG: "LOG">
|       <LOG10: "LOG10">
|       <LOG2: "LOG2">
|       <LOGICAL: "LOGICAL">
|       <MOD: "MOD">
|       <MODEL: "MODEL">
|       <NOT: "NOT">
|       <NUMBER: "NUMBER">
|       <NVL: "NVL">
|       <ODD: "ODD">
|       <OF: "OF">
|       <ONEOF: "ONEOF">
|       <OPTIONAL: "OPTIONAL">
|       <OR: "OR">
|       <OTHERWISE: "OTHERWISE">
|       <PI: "PI">
|       <PROCEDURE: "PROCEDURE">
|       <QUERY: "QUERY">
|       <REAL: "REAL">
|       <REFERENCE: "REFERENCE">
|       <REMOVE: "REMOVE">
|       <REPEAT: "REPEAT">
|       <RETURN: "RETURN">
|       <ROLESOF: "ROLESOF">
|       <RULE: "RULE">
|       <SCHEMA: "SCHEMA">
|       <SELECT: "SELECT">
|       <SELF: "SELF">
|       <SET: "SET">
|       <SIN: "SIN">
|       <SIZEOF: "SIZEOF">
|       <SKIP_E: "SKIP">
|       <SQRT: "SQRT">
|       <STRING: "STRING">
|       <SUBTYPE: "SUBTYPE">
|       <SUPERTYPE: "SUPERTYPE">
|       <TAN: "TAN">
|       <THEN: "THEN">
|       <TO: "TO">
|       <TRUE: "TRUE">
|       <TYPE: "TYPE">
|       <TYPEOF: "TYPEOF">
|       <UNIQUE: "UNIQUE">
|       <UNKNOWN: "UNKNOWN">
|       <UNTIL: "UNTIL">
|       <USE: "USE">
|       <USEDIN: "USEDIN">
|       <VALUE: "VALUE">
|       <VAR: "VAR">
|       <WHERE: "WHERE">
|       <WHILE: "WHILE">
|       <XOR: "XOR">
|       <CONST_E: "CONST_E">
|       <END_ALIAS: "END_ALIAS">
|       <END_CASE: "END_CASE">
|       <END_CONSTANT: "END_CONSTANT">
|       <END_CONTEXT: "END_CONTEXT">
|       <END_ENTITY: "END_ENTITY">
|       <END_FUNCTION: "END_FUNCTION">
|       <END_IF: "END_IF">
|       <END_LOCAL: "END_LOCAL">
|       <END_MODEL: "END_MODEL">
|       <END_PROCEDURE: "END_PROCEDURE">
|       <END_REPEAT: "END_REPEAT">
|       <END_RULE: "END_RULE">
|       <END_SCHEMA: "END_SCHEMA">
|       <END_TYPE: "END_TYPE">
|       <VALUE_IN: "VALUE_IN">
|       <VALUE_UNIQUE: "VALUE_UNIQUE">
}


TOKEN : {
   <INTEGER_LITERAL: (["+","-"])? ["0"-"9"] (["0"-"9"])*>
|  <#HEX_LITERAL: "0" ["x","X"] (<HEX_DIGIT>)+>
|  <#HEX_DIGIT: ["0"-"9","a"-"f","A"-"F"]>
|  <#OCTAL_LITERAL: "0" (["0"-"7"])*>
|  <REAL_LITERAL: (["+","-"])? (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? >
|  <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
|  <SIMPLE_STRING_LITERAL: "\'" (<DIGIT> | <LETTER> | <ESCAPED_CHAR> | <PRINT_CHAR> | " " )*  "\'" >
|  <#ESCAPED_CHAR: "\\" (["n","t","b","r","f","\\","\'","\""]) >
|  <#PRINT_CHAR: "~" | "!" | "@" | "#" | "$" | "%" | "^" |"&" | "*" | "(" | <RPAREN> | "_" | "-" | "+" | "=" | "|" | "{" | "}" | "[" | "]" | ":" | ";" | "," | "." | "<" | ">" | "/" | "?" | "~" | "`" >
//|  <ENCODED_STRING_LITERAL: "\"" (<ENCODED_CHARACTER>)+ "\"">
|  <BINARY_LITERAL: "%" (["0","1"])* >
//|  <OCTET: <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> >
//|  <#ENCODED_CHARACTER: <OCTET> <OCTET> <OCTET> <OCTET> >
|  <SIMPLE_ID: <LETTER> (<LETTER> | <DIGIT> | "_")*>
|  <#LETTER: ["A"-"Z", "a"-"z"]>
|  <#DIGIT: ["0"-"9"]>
}

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COLON: ":" >
| < COMMA: "," >
| < DOT: "."  >
}

TOKEN :
{
  < ASSIGN: ":=" >
| < GT: ">" >
| < LT: "<" >
| < LTE: "<=" >
| < GTE: ">=" >
| < QMARK: "?" >
| < POWER: "**" >
| < BSLASH: "\\" >
| < NE: "<>" >
| < EQ: "=" >
| < ASSIGN_NE: ":<>:">
| < ASSIGN_EQ: ":=:">
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*">
| < SLASH: "/">
| < SC_OR: "||" >
| < SRS: "<*" >
| < BIT_OR: "|" >
}

/************************************************
*************************************************
** Grammar
*************************************************
************************************************/


/********** PRODUCTION 140 **********/
void simple_id() : {/*@bgen(jjtree) simple_id */
                    ASTsimple_id jjtn000 = new ASTsimple_id(JJTSIMPLE_ID);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) simple_id */
        try {
/*@egen*/
        t=<SIMPLE_ID>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
          jjtn000.jjtSetValue(t.image);
        }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


/********** PRODUCTION 145 **********/

void attribute_ref() : {/*@bgen(jjtree) attribute_ref */
  ASTattribute_ref jjtn000 = new ASTattribute_ref(JJTATTRIBUTE_REF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) attribute_ref */
        try {
/*@egen*/
        attribute_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 146 **********/

void constant_ref() : {/*@bgen(jjtree) constant_ref */
  ASTconstant_ref jjtn000 = new ASTconstant_ref(JJTCONSTANT_REF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) constant_ref */
        try {
/*@egen*/
        constant_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 147 **********/

void entity_ref() : {/*@bgen(jjtree) entity_ref */
  ASTentity_ref jjtn000 = new ASTentity_ref(JJTENTITY_REF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) entity_ref */
        try {
/*@egen*/
        entity_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


/********** PRODUCTION 148 **********/

void enumeration_ref() : {/*@bgen(jjtree) enumeration_ref */
  ASTenumeration_ref jjtn000 = new ASTenumeration_ref(JJTENUMERATION_REF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) enumeration_ref */
        try {
/*@egen*/
        enumeration_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 149 **********/

void function_ref() : {/*@bgen(jjtree) function_ref */
  ASTfunction_ref jjtn000 = new ASTfunction_ref(JJTFUNCTION_REF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) function_ref */
        try {
/*@egen*/
        function_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


/********** PRODUCTION 150 **********/

void parameter_ref() : {/*@bgen(jjtree) parameter_ref */
  ASTparameter_ref jjtn000 = new ASTparameter_ref(JJTPARAMETER_REF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) parameter_ref */
        try {
/*@egen*/
        parameter_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 151 **********/

void procedure_ref() : {/*@bgen(jjtree) procedure_ref */
  ASTprocedure_ref jjtn000 = new ASTprocedure_ref(JJTPROCEDURE_REF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) procedure_ref */
        try {
/*@egen*/
        procedure_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 152 **********/

void schema_ref() : {/*@bgen(jjtree) schema_ref */
  ASTschema_ref jjtn000 = new ASTschema_ref(JJTSCHEMA_REF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) schema_ref */
        try {
/*@egen*/
        schema_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 153 **********/

void type_label_ref() : {/*@bgen(jjtree) type_label_ref */
  ASTtype_label_ref jjtn000 = new ASTtype_label_ref(JJTTYPE_LABEL_REF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) type_label_ref */
        try {
/*@egen*/
        type_label_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


/********** PRODUCTION 154 **********/

void type_ref() : {/*@bgen(jjtree) type_ref */
  ASTtype_ref jjtn000 = new ASTtype_ref(JJTTYPE_REF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) type_ref */
        try {
/*@egen*/
        type_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 155 **********/

void variable_ref() : {/*@bgen(jjtree) variable_ref */
  ASTvariable_ref jjtn000 = new ASTvariable_ref(JJTVARIABLE_REF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) variable_ref */
        try {
/*@egen*/
        variable_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 156 **********/

void abstract_supertype_declaration() : {/*@bgen(jjtree) abstract_supertype_declaration */
  ASTabstract_supertype_declaration jjtn000 = new ASTabstract_supertype_declaration(JJTABSTRACT_SUPERTYPE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) abstract_supertype_declaration */
        try {
/*@egen*/
        <ABSTRACT> <SUPERTYPE> (subtype_constraint())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 157 **********/

void actual_parameter_list() : {/*@bgen(jjtree) actual_parameter_list */
  ASTactual_parameter_list jjtn000 = new ASTactual_parameter_list(JJTACTUAL_PARAMETER_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) actual_parameter_list */
        try {
/*@egen*/
        <LPAREN> parameter() (<COMMA> parameter())* <RPAREN>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 158 **********/
void add_like_op() : {/*@bgen(jjtree) add_like_op */
  ASTadd_like_op jjtn000 = new ASTadd_like_op(JJTADD_LIKE_OP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) add_like_op */
        try {
/*@egen*/
        <PLUS> | <MINUS> | <OR> | <XOR>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 159 **********/
void aggregate_initializer() : {/*@bgen(jjtree) aggregate_initializer */
  ASTaggregate_initializer jjtn000 = new ASTaggregate_initializer(JJTAGGREGATE_INITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) aggregate_initializer */
        try {
/*@egen*/
        <LBRACKET> (element() (<COMMA> element())*)?  <RBRACKET>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 160 **********/
void aggregate_source() : {/*@bgen(jjtree) aggregate_source */
  ASTaggregate_source jjtn000 = new ASTaggregate_source(JJTAGGREGATE_SOURCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) aggregate_source */
        try {
/*@egen*/
        simple_expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 161 **********/
void aggregate_type() : {/*@bgen(jjtree) aggregate_type */
  ASTaggregate_type jjtn000 = new ASTaggregate_type(JJTAGGREGATE_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) aggregate_type */
        try {
/*@egen*/
        <AGGREGATE> (<COLON> type_label())? <OF> parameter_type()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 162 **********/
void aggregation_types() : {/*@bgen(jjtree) aggregation_types */
  ASTaggregation_types jjtn000 = new ASTaggregation_types(JJTAGGREGATION_TYPES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) aggregation_types */
        try {
/*@egen*/
        array_type() 
        | bag_type()  
        | list_type() 
        | set_type()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 163 **********/
void algorithm_head() : {/*@bgen(jjtree) algorithm_head */
  ASTalgorithm_head jjtn000 = new ASTalgorithm_head(JJTALGORITHM_HEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) algorithm_head */
        try {
/*@egen*/
        (declaration())* (constant_decl())? (local_decl())/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 164 **********/
void alias_stmt() : {/*@bgen(jjtree) alias_stmt */
  ASTalias_stmt jjtn000 = new ASTalias_stmt(JJTALIAS_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) alias_stmt */
        try {
/*@egen*/
        <ALIAS> variable_id() <FOR> general_ref() (qualifier())* <SEMICOLON> (stmt())+ <END_ALIAS> <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 165 **********/
void array_type() : {/*@bgen(jjtree) array_type */
  ASTarray_type jjtn000 = new ASTarray_type(JJTARRAY_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) array_type */
        try {
/*@egen*/
        <ARRAY> bound_spec() <OF> (<OPTIONAL>)? (<UNIQUE>)? base_type()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
} 

/********** PRODUCTION 166 **********/
void assignment_stmt() : {/*@bgen(jjtree) assignment_stmt */
  ASTassignment_stmt jjtn000 = new ASTassignment_stmt(JJTASSIGNMENT_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) assignment_stmt */
        try {
/*@egen*/
        general_ref() (qualifier())* <ASSIGN> expression() <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 167 **********/
void attribute_decl() : {/*@bgen(jjtree) attribute_decl */
  ASTattribute_decl jjtn000 = new ASTattribute_decl(JJTATTRIBUTE_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) attribute_decl */
        try {
/*@egen*/
        attribute_id() | qualified_attribute()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 168 **********/
void attribute_id() : {/*@bgen(jjtree) attribute_id */
  ASTattribute_id jjtn000 = new ASTattribute_id(JJTATTRIBUTE_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) attribute_id */
        try {
/*@egen*/
        simple_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
/********** PRODUCTION 169 **********/
void attribute_qualifier() : {/*@bgen(jjtree) attribute_qualifier */
  ASTattribute_qualifier jjtn000 = new ASTattribute_qualifier(JJTATTRIBUTE_QUALIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) attribute_qualifier */
        try {
/*@egen*/
        <DOT> attribute_ref()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 170 **********/
void bag_type() : {/*@bgen(jjtree) bag_type */
  ASTbag_type jjtn000 = new ASTbag_type(JJTBAG_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) bag_type */
        try {
/*@egen*/
        <BAG> (bound_spec())? <OF> base_type()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 171 **********/
void base_type() : {/*@bgen(jjtree) base_type */
  ASTbase_type jjtn000 = new ASTbase_type(JJTBASE_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) base_type */
        try {
/*@egen*/
        aggregation_types() 
        | simple_types() 
        | named_types()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 


}


/********** PRODUCTION 172 **********/
void binary_type() : {/*@bgen(jjtree) binary_type */
  ASTbinary_type jjtn000 = new ASTbinary_type(JJTBINARY_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) binary_type */
        try {
/*@egen*/
        <BINARY> (width_spec())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 173 **********/
void boolean_type() : {/*@bgen(jjtree) boolean_type */
  ASTboolean_type jjtn000 = new ASTboolean_type(JJTBOOLEAN_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) boolean_type */
        try {
/*@egen*/
        <BOOLEAN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 174 **********/
void bound_1() : {/*@bgen(jjtree) bound_1 */
  ASTbound_1 jjtn000 = new ASTbound_1(JJTBOUND_1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) bound_1 */
        try {
/*@egen*/
        numeric_expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 175 **********/
void bound_2() : {/*@bgen(jjtree) bound_2 */
  ASTbound_2 jjtn000 = new ASTbound_2(JJTBOUND_2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}     
{/*@bgen(jjtree) bound_2 */
        try {
/*@egen*/
        numeric_expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 176 **********/
void bound_spec() : {/*@bgen(jjtree) bound_spec */
  ASTbound_spec jjtn000 = new ASTbound_spec(JJTBOUND_SPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) bound_spec */
        try {
/*@egen*/
        <LBRACKET> bound_1() <COLON> bound_2() <RBRACKET>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 177 **********/
void built_in_constant() : {/*@bgen(jjtree) built_in_constant */
  ASTbuilt_in_constant jjtn000 = new ASTbuilt_in_constant(JJTBUILT_IN_CONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) built_in_constant */
        try {
/*@egen*/
        <CONST_E> | <PI> | <SELF> | <QMARK>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/        {          jjtn000.jjtSetValue(-1);
        }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 178 **********/
void built_in_function() : {/*@bgen(jjtree) built_in_function */
  ASTbuilt_in_function jjtn000 = new ASTbuilt_in_function(JJTBUILT_IN_FUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) built_in_function */
        try {
/*@egen*/
        <ABS> | <ACOS> | <ASIN> | <ATAN> | <BLENGTH> | <COS>  |
        <EXISTS> | <EXP> | <FORMAT> | <HIBOUND> | <HIINDEX> |
        <LENGTH> | <LOBOUND> | <LOINDEX> | <LOG> | <LOG2>   | 
        <LOG10> | <NVL> | <ODD> | <ROLESOF> | <SIN> | <SIZEOF> |
        <SQRT> | <TAN> | <TYPEOF> | <USEDIN> | <VALUE> |
        <VALUE_IN> | <VALUE_UNIQUE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 179 **********/
void built_in_procedure() : {/*@bgen(jjtree) built_in_procedure */
  ASTbuilt_in_procedure jjtn000 = new ASTbuilt_in_procedure(JJTBUILT_IN_PROCEDURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) built_in_procedure */
        try {
/*@egen*/
        <INSERT> | <REMOVE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 180 **********/
void case_action() : {/*@bgen(jjtree) case_action */
  ASTcase_action jjtn000 = new ASTcase_action(JJTCASE_ACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) case_action */
        try {
/*@egen*/
        case_label() (<COMMA> case_label())* <COLON> stmt()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 181 **********/
void case_label() : {/*@bgen(jjtree) case_label */
  ASTcase_label jjtn000 = new ASTcase_label(JJTCASE_LABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) case_label */
        try {
/*@egen*/
        expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 182 **********/
void case_stmt() : {/*@bgen(jjtree) case_stmt */
  ASTcase_stmt jjtn000 = new ASTcase_stmt(JJTCASE_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) case_stmt */
        try {
/*@egen*/
        <CASE> selector() <OF> (case_action())* (<OTHERWISE> <COLON> stmt())? <END_CASE> <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 183 **********/
void compound_stmt() : {/*@bgen(jjtree) compound_stmt */
  ASTcompound_stmt jjtn000 = new ASTcompound_stmt(JJTCOMPOUND_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) compound_stmt */
        try {
/*@egen*/
        <BEGIN> (stmt())+ <END> <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 184 **********/
void constant_body() : {/*@bgen(jjtree) constant_body */
  ASTconstant_body jjtn000 = new ASTconstant_body(JJTCONSTANT_BODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) constant_body */
        try {
/*@egen*/
        constant_id() <COLON> base_type() <ASSIGN> expression() <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 185 **********/
void constant_decl() : {/*@bgen(jjtree) constant_decl */
  ASTconstant_decl jjtn000 = new ASTconstant_decl(JJTCONSTANT_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) constant_decl */
        try {
/*@egen*/
        <CONSTANT> (constant_body())+ <END_CONSTANT> <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 186 **********/
void constant_factor() : {/*@bgen(jjtree) constant_factor */
  ASTconstant_factor jjtn000 = new ASTconstant_factor(JJTCONSTANT_FACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) constant_factor */
        try {
/*@egen*/
        built_in_constant() | constant_ref()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 187 **********/
void constant_id() : {/*@bgen(jjtree) constant_id */
  ASTconstant_id jjtn000 = new ASTconstant_id(JJTCONSTANT_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) constant_id */
        try {
/*@egen*/
        simple_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 188 **********/
void constructed_types() : {/*@bgen(jjtree) constructed_types */
  ASTconstructed_types jjtn000 = new ASTconstructed_types(JJTCONSTRUCTED_TYPES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) constructed_types */
        try {
/*@egen*/
        enumeration_type() | select_type()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 189 **********/
void declaration() : {/*@bgen(jjtree) declaration */
  ASTdeclaration jjtn000 = new ASTdeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) declaration */
        try {
/*@egen*/
        entity_decl() | function_decl() | procedure_decl() | type_decl()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 190 **********/
void derived_attr() : {/*@bgen(jjtree) derived_attr */
  ASTderived_attr jjtn000 = new ASTderived_attr(JJTDERIVED_ATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) derived_attr */
        try {
/*@egen*/
        attribute_decl() <COLON> base_type() <ASSIGN> expression() <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 191 **********/
void derive_clause() : {/*@bgen(jjtree) derive_clause */
  ASTderive_clause jjtn000 = new ASTderive_clause(JJTDERIVE_CLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) derive_clause */
        try {
/*@egen*/
        <DERIVE> (derived_attr())+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 192 **********/
void domain_rule() : {/*@bgen(jjtree) domain_rule */
  ASTdomain_rule jjtn000 = new ASTdomain_rule(JJTDOMAIN_RULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) domain_rule */
        try {
/*@egen*/
        (label() <COLON>)? expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 193 **********/
void element() : {/*@bgen(jjtree) element */
  ASTelement jjtn000 = new ASTelement(JJTELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) element */
        try {
/*@egen*/
        expression() (<COLON> repetition())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 194 **********/
void entity_body() : {/*@bgen(jjtree) entity_body */
  ASTentity_body jjtn000 = new ASTentity_body(JJTENTITY_BODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) entity_body */
        try {
/*@egen*/
        (explicit_attr())* (derive_clause())? (inverse_clause())? (unique_clause())? (where_clause())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 195 **********/
void entity_constructor() : {/*@bgen(jjtree) entity_constructor */
  ASTentity_constructor jjtn000 = new ASTentity_constructor(JJTENTITY_CONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) entity_constructor */
        try {
/*@egen*/
        entity_ref() <LPAREN> (expression() (<COMMA> expression())*)? <RPAREN>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 196 **********/
void entity_decl() : {/*@bgen(jjtree) entity_decl */
  ASTentity_decl jjtn000 = new ASTentity_decl(JJTENTITY_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) entity_decl */
        try {
/*@egen*/
        entity_head() entity_body() <END_ENTITY> <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 197 **********/
void entity_head() : {/*@bgen(jjtree) entity_head */
  ASTentity_head jjtn000 = new ASTentity_head(JJTENTITY_HEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) entity_head */
        try {
/*@egen*/
        <ENTITY> entity_id() subsuper() <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 198 **********/
void entity_id() : {/*@bgen(jjtree) entity_id */
  ASTentity_id jjtn000 = new ASTentity_id(JJTENTITY_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) entity_id */
        try {
/*@egen*/
        simple_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 199 **********/
void enumeration_id() : {/*@bgen(jjtree) enumeration_id */
  ASTenumeration_id jjtn000 = new ASTenumeration_id(JJTENUMERATION_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) enumeration_id */
        try {
/*@egen*/
        simple_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 200 **********/
void enumeration_reference() : {/*@bgen(jjtree) enumeration_reference */
  ASTenumeration_reference jjtn000 = new ASTenumeration_reference(JJTENUMERATION_REFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) enumeration_reference */
        try {
/*@egen*/
        (type_ref() <DOT>)? enumeration_ref()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}    

/********** PRODUCTION 201 **********/
void enumeration_type() : {/*@bgen(jjtree) enumeration_type */
  ASTenumeration_type jjtn000 = new ASTenumeration_type(JJTENUMERATION_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) enumeration_type */
        try {
/*@egen*/
        <ENUMERATION> <OF> <LPAREN> enumeration_id() (<COMMA> enumeration_id())* <RPAREN>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 202 **********/
void escape_stmt() : {/*@bgen(jjtree) escape_stmt */
  ASTescape_stmt jjtn000 = new ASTescape_stmt(JJTESCAPE_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) escape_stmt */
        try {
/*@egen*/
        <ESCAPE> <SEMICOLON>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 203 **********/
void explicit_attr() : {/*@bgen(jjtree) explicit_attr */
  ASTexplicit_attr jjtn000 = new ASTexplicit_attr(JJTEXPLICIT_ATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) explicit_attr */
        try {
/*@egen*/

        attribute_decl() 
        (<COMMA> attribute_decl())*
        <COLON> (<OPTIONAL>        { jjtn000.jjtSetValue(Boolean.TRUE);        })? 
        base_type()                     
        <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

/********** PRODUCTION 204 **********/
void expression() : {/*@bgen(jjtree) expression */
  ASTexpression jjtn000 = new ASTexpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) expression */
        try {
/*@egen*/
        simple_expression() (rel_op_extended() simple_expression())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 205 **********/
void factor() : {/*@bgen(jjtree) factor */
  ASTfactor jjtn000 = new ASTfactor(JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) factor */
        try {
/*@egen*/
        simple_factor() (<POWER> simple_factor())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 206 **********/
void formal_parameter() : {/*@bgen(jjtree) formal_parameter */
  ASTformal_parameter jjtn000 = new ASTformal_parameter(JJTFORMAL_PARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) formal_parameter */
        try {
/*@egen*/
        parameter_id() (<COMMA> parameter_id())* <COLON> parameter_type()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 207 **********/
void function_call() : {/*@bgen(jjtree) function_call */
  ASTfunction_call jjtn000 = new ASTfunction_call(JJTFUNCTION_CALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) function_call */
        try {
/*@egen*/
        (built_in_function() | function_ref()) (actual_parameter_list())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 208 **********/
void function_decl() : {/*@bgen(jjtree) function_decl */
  ASTfunction_decl jjtn000 = new ASTfunction_decl(JJTFUNCTION_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) function_decl */
        try {
/*@egen*/
        function_head() (algorithm_head())? (stmt())+ <END_FUNCTION> <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 209 **********/
void function_head() : {/*@bgen(jjtree) function_head */
  ASTfunction_head jjtn000 = new ASTfunction_head(JJTFUNCTION_HEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) function_head */
        try {
/*@egen*/
        <FUNCTION> function_id() (<LPAREN> formal_parameter() (<SEMICOLON> formal_parameter())* <RPAREN>)? <COLON> parameter_type()  <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 210 **********/
void function_id() : {/*@bgen(jjtree) function_id */
  ASTfunction_id jjtn000 = new ASTfunction_id(JJTFUNCTION_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) function_id */
        try {
/*@egen*/
        simple_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 211 **********/
void generalized_types() : {/*@bgen(jjtree) generalized_types */
  ASTgeneralized_types jjtn000 = new ASTgeneralized_types(JJTGENERALIZED_TYPES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) generalized_types */
        try {
/*@egen*/
        aggregate_type() 
        | general_aggregation_types() 
        | generic_type()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 212 **********/
void general_aggregation_types() : {/*@bgen(jjtree) general_aggregation_types */
  ASTgeneral_aggregation_types jjtn000 = new ASTgeneral_aggregation_types(JJTGENERAL_AGGREGATION_TYPES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) general_aggregation_types */
          try {
/*@egen*/
          general_array_type() 
        | general_bag_type() 
        | general_list_type() 
        | general_set_type()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/ 
}

/********** PRODUCTION 213 **********/
void general_array_type() : {/*@bgen(jjtree) general_array_type */
  ASTgeneral_array_type jjtn000 = new ASTgeneral_array_type(JJTGENERAL_ARRAY_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) general_array_type */
        try {
/*@egen*/
        <ARRAY>  (bound_spec())? <OF> (<OPTIONAL> )? (<UNIQUE>)? parameter_type()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 

}

/********** PRODUCTION 214 **********/
void general_bag_type() : {/*@bgen(jjtree) general_bag_type */
  ASTgeneral_bag_type jjtn000 = new ASTgeneral_bag_type(JJTGENERAL_BAG_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) general_bag_type */
        try {
/*@egen*/
        <BAG> (bound_spec())? <OF> parameter_type()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 215 **********/
void general_list_type() : {/*@bgen(jjtree) general_list_type */
  ASTgeneral_list_type jjtn000 = new ASTgeneral_list_type(JJTGENERAL_LIST_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) general_list_type */
        try {
/*@egen*/
        <LIST> (bound_spec())? <OF> (<UNIQUE>)? parameter_type()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 216 **********/
void general_ref() : {/*@bgen(jjtree) general_ref */
  ASTgeneral_ref jjtn000 = new ASTgeneral_ref(JJTGENERAL_REF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) general_ref */
          try {
/*@egen*/
          parameter_ref() 
        | variable_ref()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/ 
}

/********** PRODUCTION 217 **********/
void general_set_type() : {/*@bgen(jjtree) general_set_type */
  ASTgeneral_set_type jjtn000 = new ASTgeneral_set_type(JJTGENERAL_SET_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) general_set_type */
        try {
/*@egen*/
        <SET> (bound_spec())? <OF> parameter_type()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 218 **********/
void generic_type() : {/*@bgen(jjtree) generic_type */
  ASTgeneric_type jjtn000 = new ASTgeneric_type(JJTGENERIC_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) generic_type */
        try {
/*@egen*/
        <GENERIC> (<COLON> type_label())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 219 **********/
void group_qualifier() : {/*@bgen(jjtree) group_qualifier */
  ASTgroup_qualifier jjtn000 = new ASTgroup_qualifier(JJTGROUP_QUALIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) group_qualifier */
        try {
/*@egen*/
        <BSLASH> entity_ref()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 220 **********/
void if_stmt() : {/*@bgen(jjtree) if_stmt */
  ASTif_stmt jjtn000 = new ASTif_stmt(JJTIF_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) if_stmt */
        try {
/*@egen*/
        <IF> expression() <THEN> (stmt())+ (<ELSE> (stmt())+)? <END_IF> <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 221 **********/
void increment() : {/*@bgen(jjtree) increment */
  ASTincrement jjtn000 = new ASTincrement(JJTINCREMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) increment */
        try {
/*@egen*/
        numeric_expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 222 **********/
void increment_control() : {/*@bgen(jjtree) increment_control */
  ASTincrement_control jjtn000 = new ASTincrement_control(JJTINCREMENT_CONTROL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) increment_control */
        try {
/*@egen*/
        variable_id() <ASSIGN> bound_1() <TO> bound_2() (<BY> increment())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 223 **********/
void index() : {/*@bgen(jjtree) index */
  ASTindex jjtn000 = new ASTindex(JJTINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) index */
        try {
/*@egen*/
        numeric_expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 224 **********/
void index_1() : {/*@bgen(jjtree) index_1 */
  ASTindex_1 jjtn000 = new ASTindex_1(JJTINDEX_1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) index_1 */
        try {
/*@egen*/
        index()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 225 **********/
void index_2() : {/*@bgen(jjtree) index_2 */
  ASTindex_2 jjtn000 = new ASTindex_2(JJTINDEX_2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) index_2 */
        try {
/*@egen*/
        index()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 226 **********/
void index_qualifier() : {/*@bgen(jjtree) index_qualifier */
  ASTindex_qualifier jjtn000 = new ASTindex_qualifier(JJTINDEX_QUALIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) index_qualifier */
        try {
/*@egen*/
        <LBRACKET> index_1() (<COLON> index_2())? <RBRACKET>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 227 **********/
void integer_type() : {/*@bgen(jjtree) integer_type */
  ASTinteger_type jjtn000 = new ASTinteger_type(JJTINTEGER_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) integer_type */
        try {
/*@egen*/
        <INTEGER>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 228 **********/
void interface_specification() : {/*@bgen(jjtree) interface_specification */
  ASTinterface_specification jjtn000 = new ASTinterface_specification(JJTINTERFACE_SPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) interface_specification */
          try {
/*@egen*/
          reference_clause() 
        | use_clause()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/ 
}

/********** PRODUCTION 229 **********/
void interval() : {/*@bgen(jjtree) interval */
  ASTinterval jjtn000 = new ASTinterval(JJTINTERVAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) interval */
        try {
/*@egen*/
        <LBRACE> interval_low() interval_op() interval_item() interval_op() interval_high() <RBRACE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 230 **********/
void interval_high() : {/*@bgen(jjtree) interval_high */
  ASTinterval_high jjtn000 = new ASTinterval_high(JJTINTERVAL_HIGH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) interval_high */
        try {
/*@egen*/
        simple_expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 231 **********/
void interval_item() : {/*@bgen(jjtree) interval_item */
  ASTinterval_item jjtn000 = new ASTinterval_item(JJTINTERVAL_ITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) interval_item */
        try {
/*@egen*/
        simple_expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 232 **********/
void interval_low() : {/*@bgen(jjtree) interval_low */
  ASTinterval_low jjtn000 = new ASTinterval_low(JJTINTERVAL_LOW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) interval_low */
        try {
/*@egen*/
        simple_expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}


/********** PRODUCTION 233 **********/
void interval_op() : {/*@bgen(jjtree) interval_op */
  ASTinterval_op jjtn000 = new ASTinterval_op(JJTINTERVAL_OP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) interval_op */
        try {
/*@egen*/
        <LT> | <LTE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 234 **********/
void inverse_attr() : {/*@bgen(jjtree) inverse_attr */
  ASTinverse_attr jjtn000 = new ASTinverse_attr(JJTINVERSE_ATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) inverse_attr */
        try {
/*@egen*/
        attribute_decl() <COLON> base_type() <FOR> attribute_ref() <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 235 **********/
void inverse_clause() : {/*@bgen(jjtree) inverse_clause */
  ASTinverse_clause jjtn000 = new ASTinverse_clause(JJTINVERSE_CLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) inverse_clause */
        try {
/*@egen*/
        <INVERSE> (inverse_attr())+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 236 **********/
void label() : {/*@bgen(jjtree) label */
  ASTlabel jjtn000 = new ASTlabel(JJTLABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) label */
        try {
/*@egen*/
        simple_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 237 **********/
void list_type() : {/*@bgen(jjtree) list_type */
  ASTlist_type jjtn000 = new ASTlist_type(JJTLIST_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) list_type */
        try {
/*@egen*/
        <LIST>  (bound_spec())? <OF> (<UNIQUE>)? base_type()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 238 **********/
void literal() : {/*@bgen(jjtree) literal */
                  ASTliteral jjtn000 = new ASTliteral(JJTLITERAL);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) literal */
        try {
/*@egen*/
        <BINARY_LITERAL> | t=<INTEGER_LITERAL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
          jjtn000.jjtSetValue(Integer.parseInt(t.image));
        }
        | logical_literal() | <REAL_LITERAL> | string_literal()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 239 **********/
void local_decl() : {/*@bgen(jjtree) local_decl */
  ASTlocal_decl jjtn000 = new ASTlocal_decl(JJTLOCAL_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) local_decl */
        try {
/*@egen*/
        <LOCAL> local_variable() (local_variable())* <END_LOCAL> <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 240 **********/
void local_variable() : {/*@bgen(jjtree) local_variable */
  ASTlocal_variable jjtn000 = new ASTlocal_variable(JJTLOCAL_VARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) local_variable */
        try {
/*@egen*/
        variable_id() (<COMMA> variable_id())* <COLON> parameter_type() (<ASSIGN> expression())? <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 241 **********/
void logical_expression() : {/*@bgen(jjtree) logical_expression */
  ASTlogical_expression jjtn000 = new ASTlogical_expression(JJTLOGICAL_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) logical_expression */
        try {
/*@egen*/
        expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 242 **********/
void logical_literal() : {/*@bgen(jjtree) logical_literal */
  ASTlogical_literal jjtn000 = new ASTlogical_literal(JJTLOGICAL_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) logical_literal */
        try {
/*@egen*/
        <FALSE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
          jjtn000.jjtSetValue(false);
        }
          | <TRUE>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
          {
            jjtn000.jjtSetValue(true);
          }
            | <UNKNOWN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 243 **********/
void logical_type() : {/*@bgen(jjtree) logical_type */
  ASTlogical_type jjtn000 = new ASTlogical_type(JJTLOGICAL_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) logical_type */
        try {
/*@egen*/
        <LOGICAL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 244 **********/
void multiplication_like_op() : {/*@bgen(jjtree) multiplication_like_op */
  ASTmultiplication_like_op jjtn000 = new ASTmultiplication_like_op(JJTMULTIPLICATION_LIKE_OP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) multiplication_like_op */
        try {
/*@egen*/
        <STAR> | <SLASH> | <DIV> | <MOD> | <AND> | <SC_OR>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 245 **********/
void named_types() : {/*@bgen(jjtree) named_types */
  ASTnamed_types jjtn000 = new ASTnamed_types(JJTNAMED_TYPES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) named_types */
        try {
/*@egen*/
        entity_ref() | type_ref()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 246 **********/
void named_type_or_rename() : {/*@bgen(jjtree) named_type_or_rename */
  ASTnamed_type_or_rename jjtn000 = new ASTnamed_type_or_rename(JJTNAMED_TYPE_OR_RENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) named_type_or_rename */
        try {
/*@egen*/
        named_types() (<AS> (entity_id() | type_id()))?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 247 **********/
void null_stmt() : {/*@bgen(jjtree) null_stmt */
  ASTnull_stmt jjtn000 = new ASTnull_stmt(JJTNULL_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) null_stmt */
        try {
/*@egen*/
        <SEMICOLON>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 248 **********/
void number_type() : {/*@bgen(jjtree) number_type */
  ASTnumber_type jjtn000 = new ASTnumber_type(JJTNUMBER_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) number_type */
        try {
/*@egen*/
        <NUMBER>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 249 **********/
void numeric_expression() : {/*@bgen(jjtree) numeric_expression */
  ASTnumeric_expression jjtn000 = new ASTnumeric_expression(JJTNUMERIC_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) numeric_expression */
        try {
/*@egen*/
        simple_expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 250 **********/
void one_of() : {/*@bgen(jjtree) one_of */
  ASTone_of jjtn000 = new ASTone_of(JJTONE_OF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) one_of */
        try {
/*@egen*/
        <ONEOF> <LPAREN> supertype_expression() (<COMMA> supertype_expression())* <RPAREN>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 251 **********/
void parameter() : {/*@bgen(jjtree) parameter */
  ASTparameter jjtn000 = new ASTparameter(JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) parameter */
        try {
/*@egen*/
        expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 252 **********/
void parameter_id() : {/*@bgen(jjtree) parameter_id */
  ASTparameter_id jjtn000 = new ASTparameter_id(JJTPARAMETER_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) parameter_id */
        try {
/*@egen*/
        simple_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 253 **********/
void parameter_type() : {/*@bgen(jjtree) parameter_type */
  ASTparameter_type jjtn000 = new ASTparameter_type(JJTPARAMETER_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) parameter_type */
        try {
/*@egen*/
        generalized_types() | named_types() | simple_types()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 254 **********/
void population() : {/*@bgen(jjtree) population */
  ASTpopulation jjtn000 = new ASTpopulation(JJTPOPULATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) population */
        try {
/*@egen*/
        entity_ref()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 255 **********/
void precision_spec() : {/*@bgen(jjtree) precision_spec */
  ASTprecision_spec jjtn000 = new ASTprecision_spec(JJTPRECISION_SPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) precision_spec */
        try {
/*@egen*/
        numeric_expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 256 **********/
void primary() : {/*@bgen(jjtree) primary */
  ASTprimary jjtn000 = new ASTprimary(JJTPRIMARY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) primary */
        try {
/*@egen*/
        literal() | (qualifiable_factor() (qualifier())*)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 257 **********/
void procedure_call_stmt() : {/*@bgen(jjtree) procedure_call_stmt */
  ASTprocedure_call_stmt jjtn000 = new ASTprocedure_call_stmt(JJTPROCEDURE_CALL_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) procedure_call_stmt */
        try {
/*@egen*/
        (built_in_procedure() | procedure_ref()) (actual_parameter_list())? <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 258 **********/
void procedure_decl() : {/*@bgen(jjtree) procedure_decl */
  ASTprocedure_decl jjtn000 = new ASTprocedure_decl(JJTPROCEDURE_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) procedure_decl */
        try {
/*@egen*/
        procedure_head() (algorithm_head())? (stmt())* <END_PROCEDURE> <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 259 **********/
void procedure_head() : {/*@bgen(jjtree) procedure_head */
  ASTprocedure_head jjtn000 = new ASTprocedure_head(JJTPROCEDURE_HEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) procedure_head */
        try {
/*@egen*/
        <PROCEDURE> procedure_id() (<LPAREN> (<VAR>)? formal_parameter() (<SEMICOLON> (<VAR>)? formal_parameter())* <RPAREN>)? <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 260 **********/
void procedure_id() : {/*@bgen(jjtree) procedure_id */
  ASTprocedure_id jjtn000 = new ASTprocedure_id(JJTPROCEDURE_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) procedure_id */
        try {
/*@egen*/
        simple_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 261 **********/
void qualifiable_factor() : {/*@bgen(jjtree) qualifiable_factor */
  ASTqualifiable_factor jjtn000 = new ASTqualifiable_factor(JJTQUALIFIABLE_FACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) qualifiable_factor */
          try {
/*@egen*/
          attribute_ref()
        | constant_factor()
        | function_call()
        | general_ref()
        | population()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

/********** PRODUCTION 262 **********/
void qualified_attribute() : {/*@bgen(jjtree) qualified_attribute */
  ASTqualified_attribute jjtn000 = new ASTqualified_attribute(JJTQUALIFIED_ATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) qualified_attribute */
        try {
/*@egen*/
        <SELF> group_qualifier() attribute_qualifier()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 263 **********/
void qualifier() : {/*@bgen(jjtree) qualifier */
  ASTqualifier jjtn000 = new ASTqualifier(JJTQUALIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) qualifier */
          try {
/*@egen*/
          attribute_qualifier()
        | group_qualifier()     
        | index_qualifier()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/ 
}

/********** PRODUCTION 264 **********/
void query_expression() : {/*@bgen(jjtree) query_expression */
  ASTquery_expression jjtn000 = new ASTquery_expression(JJTQUERY_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) query_expression */
        try {
/*@egen*/
        <QUERY> <LPAREN> variable_id() <SRS> aggregate_source() <BIT_OR> logical_expression() <RPAREN>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 265 **********/
void real_type() : {/*@bgen(jjtree) real_type */
  ASTreal_type jjtn000 = new ASTreal_type(JJTREAL_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) real_type */
        try {
/*@egen*/
        <REAL> (<LPAREN> precision_spec() <RPAREN>)?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 266 **********/
void referenced_attribute() : {/*@bgen(jjtree) referenced_attribute */
  ASTreferenced_attribute jjtn000 = new ASTreferenced_attribute(JJTREFERENCED_ATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) referenced_attribute */
          try {
/*@egen*/
          attribute_ref()
        | qualified_attribute()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/ 
}

/********** PRODUCTION 267 **********/
void reference_clause() : {/*@bgen(jjtree) reference_clause */
  ASTreference_clause jjtn000 = new ASTreference_clause(JJTREFERENCE_CLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) reference_clause */
        try {
/*@egen*/
        <REFERENCE> <FROM> schema_ref() (<LPAREN> resource_or_rename() (<COMMA> resource_or_rename())* <RPAREN> )? <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 268 **********/
void rel_op() : {/*@bgen(jjtree) rel_op */
  ASTrel_op jjtn000 = new ASTrel_op(JJTREL_OP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) rel_op */
        try {
/*@egen*/
        <LT> | <GT> | <LTE> | <GTE> | <NE> | <EQ> | <ASSIGN_NE> | <ASSIGN_EQ>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 269 **********/
void rel_op_extended() : {/*@bgen(jjtree) rel_op_extended */
  ASTrel_op_extended jjtn000 = new ASTrel_op_extended(JJTREL_OP_EXTENDED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) rel_op_extended */
        try {
/*@egen*/
        rel_op() | <IN> | <LIKE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 270 **********/
void rename_id() : {/*@bgen(jjtree) rename_id */
  ASTrename_id jjtn000 = new ASTrename_id(JJTRENAME_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) rename_id */
          try {
/*@egen*/
          constant_id()
        | entity_id()
        | function_id()
        | procedure_id()
        | type_id()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/ 
}

/********** PRODUCTION 271 **********/
void repeat_control() : {/*@bgen(jjtree) repeat_control */
  ASTrepeat_control jjtn000 = new ASTrepeat_control(JJTREPEAT_CONTROL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) repeat_control */
        try {
/*@egen*/
        (increment_control())? (while_control())? (until_control())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 272 **********/
void repeat_stmt() : {/*@bgen(jjtree) repeat_stmt */
  ASTrepeat_stmt jjtn000 = new ASTrepeat_stmt(JJTREPEAT_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) repeat_stmt */
        try {
/*@egen*/
        <REPEAT> repeat_control() <SEMICOLON> (stmt())+ <END_REPEAT> <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 273 **********/
void repetition() : {/*@bgen(jjtree) repetition */
  ASTrepetition jjtn000 = new ASTrepetition(JJTREPETITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) repetition */
        try {
/*@egen*/
        numeric_expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 274 **********/
void resource_or_rename() : {/*@bgen(jjtree) resource_or_rename */
  ASTresource_or_rename jjtn000 = new ASTresource_or_rename(JJTRESOURCE_OR_RENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) resource_or_rename */
        try {
/*@egen*/
        resource_ref() (<AS> rename_id())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 275 **********/
void resource_ref() : {/*@bgen(jjtree) resource_ref */
  ASTresource_ref jjtn000 = new ASTresource_ref(JJTRESOURCE_REF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) resource_ref */
          try {
/*@egen*/
          constant_ref()
        | entity_ref()
        | function_ref()        
        | procedure_ref()
        | type_ref()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/ 
}

/********** PRODUCTION 276 **********/
void return_stmt() : {/*@bgen(jjtree) return_stmt */
  ASTreturn_stmt jjtn000 = new ASTreturn_stmt(JJTRETURN_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) return_stmt */
        try {
/*@egen*/
        <RETURN> (<LPAREN> expression() <RPAREN>)? <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 277 **********/
void rule_decl() : {/*@bgen(jjtree) rule_decl */
  ASTrule_decl jjtn000 = new ASTrule_decl(JJTRULE_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) rule_decl */
        try {
/*@egen*/
        rule_head() (algorithm_head())? (stmt())* where_clause() <END_RULE> <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 278 **********/
void rule_head() : {/*@bgen(jjtree) rule_head */
  ASTrule_head jjtn000 = new ASTrule_head(JJTRULE_HEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) rule_head */
        try {
/*@egen*/
        <RULE> rule_id() <FOR> <LPAREN> entity_ref() (<COMMA> entity_ref())* <RPAREN> <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 279 **********/
void rule_id() : {/*@bgen(jjtree) rule_id */
  ASTrule_id jjtn000 = new ASTrule_id(JJTRULE_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) rule_id */
        try {
/*@egen*/
        simple_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 280 **********/
void schema_body() : {/*@bgen(jjtree) schema_body */
  ASTschema_body jjtn000 = new ASTschema_body(JJTSCHEMA_BODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) schema_body */
        try {
/*@egen*/
        (interface_specification())* (constant_decl())? ( declaration() | rule_decl() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 281 **********/
void schema_decl() : {/*@bgen(jjtree) schema_decl */
  ASTschema_decl jjtn000 = new ASTschema_decl(JJTSCHEMA_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) schema_decl */
        try {
/*@egen*/
        <SCHEMA> schema_id()
          <SEMICOLON> schema_body() <END_SCHEMA> <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 282 **********/
void schema_id() : {/*@bgen(jjtree) schema_id */
  ASTschema_id jjtn000 = new ASTschema_id(JJTSCHEMA_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) schema_id */
        try {
/*@egen*/
        simple_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 283 **********/
void selector() : {/*@bgen(jjtree) selector */
  ASTselector jjtn000 = new ASTselector(JJTSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) selector */
        try {
/*@egen*/
        expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 284 **********/
void select_type() : {/*@bgen(jjtree) select_type */
  ASTselect_type jjtn000 = new ASTselect_type(JJTSELECT_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) select_type */
        try {
/*@egen*/
        <SELECT> <LPAREN> named_types() (<COMMA> named_types() )* <RPAREN>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 285 **********/
void set_type() : {/*@bgen(jjtree) set_type */
  ASTset_type jjtn000 = new ASTset_type(JJTSET_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) set_type */
        try {
/*@egen*/
        <SET> (bound_spec())? <OF> base_type()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 286 **********/
void sign() : {/*@bgen(jjtree) sign */
  ASTsign jjtn000 = new ASTsign(JJTSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) sign */
        try {
/*@egen*/
        <PLUS> | <MINUS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 287 **********/
void simple_expression() : {/*@bgen(jjtree) simple_expression */
  ASTsimple_expression jjtn000 = new ASTsimple_expression(JJTSIMPLE_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) simple_expression */
        try {
/*@egen*/
        term() (add_like_op() term())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 288 **********/
void simple_factor() : {/*@bgen(jjtree) simple_factor */
  ASTsimple_factor jjtn000 = new ASTsimple_factor(JJTSIMPLE_FACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) simple_factor */
        try {
/*@egen*/
        LOOKAHEAD(3)
          aggregate_initializer() 
        //| entity_constructor() 
        //| enumeration_reference()
        | interval()
        | query_expression()
        | ( (unary_op())? ( <LPAREN> expression() <RPAREN> | primary() ) )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 289 **********/
void simple_types() : {/*@bgen(jjtree) simple_types */
  ASTsimple_types jjtn000 = new ASTsimple_types(JJTSIMPLE_TYPES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) simple_types */
          try {
/*@egen*/
          binary_type() 
        | boolean_type() 
        | integer_type() 
        | logical_type() 
        | number_type() 
        | real_type() 
        | string_type()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/ 
}

/********** PRODUCTION 290 **********/
void skip_stmt() : {/*@bgen(jjtree) skip_stmt */
  ASTskip_stmt jjtn000 = new ASTskip_stmt(JJTSKIP_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) skip_stmt */
        try {
/*@egen*/
        <SKIP_E> <SEMICOLON>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 291 **********/
void stmt() : {/*@bgen(jjtree) stmt */
  ASTstmt jjtn000 = new ASTstmt(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) stmt */
          try {
/*@egen*/
          alias_stmt() 
        | assignment_stmt() 
        | case_stmt() 
        | compound_stmt() 
        | escape_stmt()
        | if_stmt()
        | null_stmt() 
        | procedure_call_stmt() 
        | repeat_stmt() 
        | return_stmt() 
        | skip_stmt()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/ 
}

/********** PRODUCTION 292 **********/
void string_literal() : {/*@bgen(jjtree) string_literal */
  ASTstring_literal jjtn000 = new ASTstring_literal(JJTSTRING_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) string_literal */
        try {
/*@egen*/
        <SIMPLE_STRING_LITERAL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ //| <ENCODED_STRING_LITERAL> 
}

/********** PRODUCTION 293 **********/
void string_type() : {/*@bgen(jjtree) string_type */
  ASTstring_type jjtn000 = new ASTstring_type(JJTSTRING_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) string_type */
        try {
/*@egen*/
        <STRING> (width_spec())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 294 **********/
void subsuper() : {/*@bgen(jjtree) subsuper */
  ASTsubsuper jjtn000 = new ASTsubsuper(JJTSUBSUPER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) subsuper */
        try {
/*@egen*/
        (supertype_constraint())? (subtype_declaration())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 295 **********/
void subtype_constraint() : {/*@bgen(jjtree) subtype_constraint */
  ASTsubtype_constraint jjtn000 = new ASTsubtype_constraint(JJTSUBTYPE_CONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) subtype_constraint */
        try {
/*@egen*/
        <OF> <LPAREN> supertype_expression() <RPAREN>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 296 **********/
void subtype_declaration() : {/*@bgen(jjtree) subtype_declaration */
  ASTsubtype_declaration jjtn000 = new ASTsubtype_declaration(JJTSUBTYPE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) subtype_declaration */
        try {
/*@egen*/
        <SUBTYPE> <OF> <LPAREN> entity_ref() (<COMMA> entity_ref() )* <RPAREN>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 297 **********/
void supertype_constraint() : {/*@bgen(jjtree) supertype_constraint */
  ASTsupertype_constraint jjtn000 = new ASTsupertype_constraint(JJTSUPERTYPE_CONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) supertype_constraint */
          try {
/*@egen*/
          abstract_supertype_declaration() 
        | supertype_rule()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/ 
}

/********** PRODUCTION 298 **********/
void supertype_expression() : {/*@bgen(jjtree) supertype_expression */
  ASTsupertype_expression jjtn000 = new ASTsupertype_expression(JJTSUPERTYPE_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) supertype_expression */
        try {
/*@egen*/
        supertype_factor() (<ANDOR> supertype_factor())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 299 **********/
void supertype_factor() : {/*@bgen(jjtree) supertype_factor */
  ASTsupertype_factor jjtn000 = new ASTsupertype_factor(JJTSUPERTYPE_FACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) supertype_factor */
        try {
/*@egen*/
        supertype_term() (<AND> supertype_term())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 300 **********/
void supertype_rule() : {/*@bgen(jjtree) supertype_rule */
  ASTsupertype_rule jjtn000 = new ASTsupertype_rule(JJTSUPERTYPE_RULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) supertype_rule */
        try {
/*@egen*/
        <SUPERTYPE> subtype_constraint()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 301 **********/
void supertype_term() : {/*@bgen(jjtree) supertype_term */
  ASTsupertype_term jjtn000 = new ASTsupertype_term(JJTSUPERTYPE_TERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) supertype_term */
          try {
/*@egen*/
          entity_ref()
        | one_of() 
        | <LPAREN> supertype_expression() <RPAREN>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/ 
}

/********** PRODUCTION 302 **********/
ASTsyntax syntax() : {/*@bgen(jjtree) syntax */
  ASTsyntax jjtn000 = new ASTsyntax(JJTSYNTAX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) syntax */
        try {
/*@egen*/
        ( schema_decl() )+/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
          return jjtn000;
        }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 303 **********/
void term() : {/*@bgen(jjtree) term */
  ASTterm jjtn000 = new ASTterm(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) term */
        try {
/*@egen*/
        factor() (multiplication_like_op() factor())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 304 **********/
void type_decl() : {/*@bgen(jjtree) type_decl */
  ASTtype_decl jjtn000 = new ASTtype_decl(JJTTYPE_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) type_decl */
        try {
/*@egen*/
        <TYPE> type_id() <EQ> underlying_type() <SEMICOLON> (where_clause())? <END_TYPE> <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 305 **********/
void type_id() : {/*@bgen(jjtree) type_id */
  ASTtype_id jjtn000 = new ASTtype_id(JJTTYPE_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) type_id */
        try {
/*@egen*/
        simple_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 306 **********/
void type_label() : {/*@bgen(jjtree) type_label */
  ASTtype_label jjtn000 = new ASTtype_label(JJTTYPE_LABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) type_label */
          try {
/*@egen*/
          type_label_id()
        | type_label_ref()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/ 
}

/********** PRODUCTION 307 **********/
void type_label_id() : {/*@bgen(jjtree) type_label_id */
  ASTtype_label_id jjtn000 = new ASTtype_label_id(JJTTYPE_LABEL_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) type_label_id */
        try {
/*@egen*/
        simple_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 308 **********/
void unary_op() : {/*@bgen(jjtree) unary_op */
  ASTunary_op jjtn000 = new ASTunary_op(JJTUNARY_OP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) unary_op */
        try {
/*@egen*/
        <PLUS> | <MINUS> | <NOT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 309 **********/
void underlying_type() : {/*@bgen(jjtree) underlying_type */
  ASTunderlying_type jjtn000 = new ASTunderlying_type(JJTUNDERLYING_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) underlying_type */
          try {
/*@egen*/
          constructed_types() 
        | aggregation_types() 
        | simple_types() 
        | type_ref()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/ 
}

/********** PRODUCTION 310 **********/
void unique_clause() : {/*@bgen(jjtree) unique_clause */
  ASTunique_clause jjtn000 = new ASTunique_clause(JJTUNIQUE_CLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) unique_clause */
        try {
/*@egen*/
        <UNIQUE> unique_rule() <SEMICOLON> (unique_rule() <SEMICOLON>)*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 311 **********/
void unique_rule() : {/*@bgen(jjtree) unique_rule */
  ASTunique_rule jjtn000 = new ASTunique_rule(JJTUNIQUE_RULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) unique_rule */
        try {
/*@egen*/
        (label() <COLON>)? referenced_attribute() (<COMMA> referenced_attribute())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 312 **********/
void until_control() : {/*@bgen(jjtree) until_control */
  ASTuntil_control jjtn000 = new ASTuntil_control(JJTUNTIL_CONTROL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) until_control */
        try {
/*@egen*/
        <UNTIL> expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 313 **********/
void use_clause() : {/*@bgen(jjtree) use_clause */
  ASTuse_clause jjtn000 = new ASTuse_clause(JJTUSE_CLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) use_clause */
        try {
/*@egen*/
        <USE> <FROM> schema_ref() (<LPAREN> named_type_or_rename() (<COMMA> named_type_or_rename())* <RPAREN> )? <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 314 **********/
void variable_id() : {/*@bgen(jjtree) variable_id */
  ASTvariable_id jjtn000 = new ASTvariable_id(JJTVARIABLE_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) variable_id */
        try {
/*@egen*/
        simple_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/********** PRODUCTION 315 **********/
void where_clause() : {/*@bgen(jjtree) where_clause */
  ASTwhere_clause jjtn000 = new ASTwhere_clause(JJTWHERE_CLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) where_clause */
        try {
/*@egen*/
        <WHERE> domain_rule() <SEMICOLON> (domain_rule() <SEMICOLON> )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 316 **********/
void while_control() : {/*@bgen(jjtree) while_control */
  ASTwhile_control jjtn000 = new ASTwhile_control(JJTWHILE_CONTROL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) while_control */
        try {
/*@egen*/
        <WHILE> logical_expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 317 **********/
void width() : {/*@bgen(jjtree) width */
  ASTwidth jjtn000 = new ASTwidth(JJTWIDTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) width */
        try {
/*@egen*/
        numeric_expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

/********** PRODUCTION 318 **********/
void width_spec() : {/*@bgen(jjtree) width_spec */
  ASTwidth_spec jjtn000 = new ASTwidth_spec(JJTWIDTH_SPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) width_spec */
        try {
/*@egen*/
        <LPAREN> width() <RPAREN> (<FIXED>)?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}
