/* Generated By:JJTree&JavaCC: Do not edit this line. ExpressParserConstants.java */
package org.ifc4emf.metamodel.express.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
@SuppressWarnings("all")
public interface ExpressParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int TAIL_REMARK = 6;
  /** RegularExpression Id. */
  int EMBEDDED_REMARK = 7;
  /** RegularExpression Id. */
  int ABS = 8;
  /** RegularExpression Id. */
  int ABSTRACT = 9;
  /** RegularExpression Id. */
  int ACOS = 10;
  /** RegularExpression Id. */
  int AGGREGATE = 11;
  /** RegularExpression Id. */
  int ALIAS = 12;
  /** RegularExpression Id. */
  int AND = 13;
  /** RegularExpression Id. */
  int ANDOR = 14;
  /** RegularExpression Id. */
  int ARRAY = 15;
  /** RegularExpression Id. */
  int AS = 16;
  /** RegularExpression Id. */
  int ASIN = 17;
  /** RegularExpression Id. */
  int ATAN = 18;
  /** RegularExpression Id. */
  int BAG = 19;
  /** RegularExpression Id. */
  int BEGIN = 20;
  /** RegularExpression Id. */
  int BINARY = 21;
  /** RegularExpression Id. */
  int BLENGTH = 22;
  /** RegularExpression Id. */
  int BOOLEAN = 23;
  /** RegularExpression Id. */
  int BY = 24;
  /** RegularExpression Id. */
  int CASE = 25;
  /** RegularExpression Id. */
  int CONSTANT = 26;
  /** RegularExpression Id. */
  int CONTEXT = 27;
  /** RegularExpression Id. */
  int COS = 28;
  /** RegularExpression Id. */
  int DERIVE = 29;
  /** RegularExpression Id. */
  int DIV = 30;
  /** RegularExpression Id. */
  int ELSE = 31;
  /** RegularExpression Id. */
  int END = 32;
  /** RegularExpression Id. */
  int ENTITY = 33;
  /** RegularExpression Id. */
  int ENUMERATION = 34;
  /** RegularExpression Id. */
  int ESCAPE = 35;
  /** RegularExpression Id. */
  int EXISTS = 36;
  /** RegularExpression Id. */
  int EXP = 37;
  /** RegularExpression Id. */
  int FALSE = 38;
  /** RegularExpression Id. */
  int FIXED = 39;
  /** RegularExpression Id. */
  int FOR = 40;
  /** RegularExpression Id. */
  int FORMAT = 41;
  /** RegularExpression Id. */
  int FROM = 42;
  /** RegularExpression Id. */
  int FUNCTION = 43;
  /** RegularExpression Id. */
  int GENERIC = 44;
  /** RegularExpression Id. */
  int HIBOUND = 45;
  /** RegularExpression Id. */
  int HIINDEX = 46;
  /** RegularExpression Id. */
  int IF = 47;
  /** RegularExpression Id. */
  int IN = 48;
  /** RegularExpression Id. */
  int INSERT = 49;
  /** RegularExpression Id. */
  int INTEGER = 50;
  /** RegularExpression Id. */
  int INVERSE = 51;
  /** RegularExpression Id. */
  int LENGTH = 52;
  /** RegularExpression Id. */
  int LIKE = 53;
  /** RegularExpression Id. */
  int LIST = 54;
  /** RegularExpression Id. */
  int LOBOUND = 55;
  /** RegularExpression Id. */
  int LOINDEX = 56;
  /** RegularExpression Id. */
  int LOCAL = 57;
  /** RegularExpression Id. */
  int LOG = 58;
  /** RegularExpression Id. */
  int LOG10 = 59;
  /** RegularExpression Id. */
  int LOG2 = 60;
  /** RegularExpression Id. */
  int LOGICAL = 61;
  /** RegularExpression Id. */
  int MOD = 62;
  /** RegularExpression Id. */
  int MODEL = 63;
  /** RegularExpression Id. */
  int NOT = 64;
  /** RegularExpression Id. */
  int NUMBER = 65;
  /** RegularExpression Id. */
  int NVL = 66;
  /** RegularExpression Id. */
  int ODD = 67;
  /** RegularExpression Id. */
  int OF = 68;
  /** RegularExpression Id. */
  int ONEOF = 69;
  /** RegularExpression Id. */
  int OPTIONAL = 70;
  /** RegularExpression Id. */
  int OR = 71;
  /** RegularExpression Id. */
  int OTHERWISE = 72;
  /** RegularExpression Id. */
  int PI = 73;
  /** RegularExpression Id. */
  int PROCEDURE = 74;
  /** RegularExpression Id. */
  int QUERY = 75;
  /** RegularExpression Id. */
  int REAL = 76;
  /** RegularExpression Id. */
  int REFERENCE = 77;
  /** RegularExpression Id. */
  int REMOVE = 78;
  /** RegularExpression Id. */
  int REPEAT = 79;
  /** RegularExpression Id. */
  int RETURN = 80;
  /** RegularExpression Id. */
  int ROLESOF = 81;
  /** RegularExpression Id. */
  int RULE = 82;
  /** RegularExpression Id. */
  int SCHEMA = 83;
  /** RegularExpression Id. */
  int SELECT = 84;
  /** RegularExpression Id. */
  int SELF = 85;
  /** RegularExpression Id. */
  int SET = 86;
  /** RegularExpression Id. */
  int SIN = 87;
  /** RegularExpression Id. */
  int SIZEOF = 88;
  /** RegularExpression Id. */
  int SKIP_E = 89;
  /** RegularExpression Id. */
  int SQRT = 90;
  /** RegularExpression Id. */
  int STRING = 91;
  /** RegularExpression Id. */
  int SUBTYPE = 92;
  /** RegularExpression Id. */
  int SUPERTYPE = 93;
  /** RegularExpression Id. */
  int TAN = 94;
  /** RegularExpression Id. */
  int THEN = 95;
  /** RegularExpression Id. */
  int TO = 96;
  /** RegularExpression Id. */
  int TRUE = 97;
  /** RegularExpression Id. */
  int TYPE = 98;
  /** RegularExpression Id. */
  int TYPEOF = 99;
  /** RegularExpression Id. */
  int UNIQUE = 100;
  /** RegularExpression Id. */
  int UNKNOWN = 101;
  /** RegularExpression Id. */
  int UNTIL = 102;
  /** RegularExpression Id. */
  int USE = 103;
  /** RegularExpression Id. */
  int USEDIN = 104;
  /** RegularExpression Id. */
  int VALUE = 105;
  /** RegularExpression Id. */
  int VAR = 106;
  /** RegularExpression Id. */
  int WHERE = 107;
  /** RegularExpression Id. */
  int WHILE = 108;
  /** RegularExpression Id. */
  int XOR = 109;
  /** RegularExpression Id. */
  int CONST_E = 110;
  /** RegularExpression Id. */
  int END_ALIAS = 111;
  /** RegularExpression Id. */
  int END_CASE = 112;
  /** RegularExpression Id. */
  int END_CONSTANT = 113;
  /** RegularExpression Id. */
  int END_CONTEXT = 114;
  /** RegularExpression Id. */
  int END_ENTITY = 115;
  /** RegularExpression Id. */
  int END_FUNCTION = 116;
  /** RegularExpression Id. */
  int END_IF = 117;
  /** RegularExpression Id. */
  int END_LOCAL = 118;
  /** RegularExpression Id. */
  int END_MODEL = 119;
  /** RegularExpression Id. */
  int END_PROCEDURE = 120;
  /** RegularExpression Id. */
  int END_REPEAT = 121;
  /** RegularExpression Id. */
  int END_RULE = 122;
  /** RegularExpression Id. */
  int END_SCHEMA = 123;
  /** RegularExpression Id. */
  int END_TYPE = 124;
  /** RegularExpression Id. */
  int VALUE_IN = 125;
  /** RegularExpression Id. */
  int VALUE_UNIQUE = 126;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 127;
  /** RegularExpression Id. */
  int HEX_LITERAL = 128;
  /** RegularExpression Id. */
  int HEX_DIGIT = 129;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 130;
  /** RegularExpression Id. */
  int REAL_LITERAL = 131;
  /** RegularExpression Id. */
  int EXPONENT = 132;
  /** RegularExpression Id. */
  int SIMPLE_STRING_LITERAL = 133;
  /** RegularExpression Id. */
  int ESCAPED_CHAR = 134;
  /** RegularExpression Id. */
  int PRINT_CHAR = 135;
  /** RegularExpression Id. */
  int BINARY_LITERAL = 136;
  /** RegularExpression Id. */
  int SIMPLE_ID = 137;
  /** RegularExpression Id. */
  int LETTER = 138;
  /** RegularExpression Id. */
  int DIGIT = 139;
  /** RegularExpression Id. */
  int LPAREN = 140;
  /** RegularExpression Id. */
  int RPAREN = 141;
  /** RegularExpression Id. */
  int LBRACE = 142;
  /** RegularExpression Id. */
  int RBRACE = 143;
  /** RegularExpression Id. */
  int LBRACKET = 144;
  /** RegularExpression Id. */
  int RBRACKET = 145;
  /** RegularExpression Id. */
  int SEMICOLON = 146;
  /** RegularExpression Id. */
  int COLON = 147;
  /** RegularExpression Id. */
  int COMMA = 148;
  /** RegularExpression Id. */
  int DOT = 149;
  /** RegularExpression Id. */
  int ASSIGN = 150;
  /** RegularExpression Id. */
  int GT = 151;
  /** RegularExpression Id. */
  int LT = 152;
  /** RegularExpression Id. */
  int LTE = 153;
  /** RegularExpression Id. */
  int GTE = 154;
  /** RegularExpression Id. */
  int QMARK = 155;
  /** RegularExpression Id. */
  int POWER = 156;
  /** RegularExpression Id. */
  int BSLASH = 157;
  /** RegularExpression Id. */
  int NE = 158;
  /** RegularExpression Id. */
  int EQ = 159;
  /** RegularExpression Id. */
  int ASSIGN_NE = 160;
  /** RegularExpression Id. */
  int ASSIGN_EQ = 161;
  /** RegularExpression Id. */
  int PLUS = 162;
  /** RegularExpression Id. */
  int MINUS = 163;
  /** RegularExpression Id. */
  int STAR = 164;
  /** RegularExpression Id. */
  int SLASH = 165;
  /** RegularExpression Id. */
  int SC_OR = 166;
  /** RegularExpression Id. */
  int SRS = 167;
  /** RegularExpression Id. */
  int BIT_OR = 168;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<TAIL_REMARK>",
    "<EMBEDDED_REMARK>",
    "\"ABS\"",
    "\"ABSTRACT\"",
    "\"ACOS\"",
    "\"AGGREGATE\"",
    "\"ALIAS\"",
    "\"AND\"",
    "\"ANDOR\"",
    "\"ARRAY\"",
    "\"AS\"",
    "\"ASIN\"",
    "\"ATAN\"",
    "\"BAG\"",
    "\"BEGIN\"",
    "\"BINARY\"",
    "\"BLENGTH\"",
    "\"BOOLEAN\"",
    "\"BY\"",
    "\"CASE\"",
    "\"CONSTANT\"",
    "\"CONTEXT\"",
    "\"COS\"",
    "\"DERIVE\"",
    "\"DIV\"",
    "\"ELSE\"",
    "\"END\"",
    "\"ENTITY\"",
    "\"ENUMERATION\"",
    "\"ESCAPE\"",
    "\"EXISTS\"",
    "\"EXP\"",
    "\"FALSE\"",
    "\"FIXED\"",
    "\"FOR\"",
    "\"FORMAT\"",
    "\"FROM\"",
    "\"FUNCTION\"",
    "\"GENERIC\"",
    "\"HIBOUND\"",
    "\"HIINDEX\"",
    "\"IF\"",
    "\"IN\"",
    "\"INSERT\"",
    "\"INTEGER\"",
    "\"INVERSE\"",
    "\"LENGTH\"",
    "\"LIKE\"",
    "\"LIST\"",
    "\"LOBOUND\"",
    "\"LOINDEX\"",
    "\"LOCAL\"",
    "\"LOG\"",
    "\"LOG10\"",
    "\"LOG2\"",
    "\"LOGICAL\"",
    "\"MOD\"",
    "\"MODEL\"",
    "\"NOT\"",
    "\"NUMBER\"",
    "\"NVL\"",
    "\"ODD\"",
    "\"OF\"",
    "\"ONEOF\"",
    "\"OPTIONAL\"",
    "\"OR\"",
    "\"OTHERWISE\"",
    "\"PI\"",
    "\"PROCEDURE\"",
    "\"QUERY\"",
    "\"REAL\"",
    "\"REFERENCE\"",
    "\"REMOVE\"",
    "\"REPEAT\"",
    "\"RETURN\"",
    "\"ROLESOF\"",
    "\"RULE\"",
    "\"SCHEMA\"",
    "\"SELECT\"",
    "\"SELF\"",
    "\"SET\"",
    "\"SIN\"",
    "\"SIZEOF\"",
    "\"SKIP\"",
    "\"SQRT\"",
    "\"STRING\"",
    "\"SUBTYPE\"",
    "\"SUPERTYPE\"",
    "\"TAN\"",
    "\"THEN\"",
    "\"TO\"",
    "\"TRUE\"",
    "\"TYPE\"",
    "\"TYPEOF\"",
    "\"UNIQUE\"",
    "\"UNKNOWN\"",
    "\"UNTIL\"",
    "\"USE\"",
    "\"USEDIN\"",
    "\"VALUE\"",
    "\"VAR\"",
    "\"WHERE\"",
    "\"WHILE\"",
    "\"XOR\"",
    "\"CONST_E\"",
    "\"END_ALIAS\"",
    "\"END_CASE\"",
    "\"END_CONSTANT\"",
    "\"END_CONTEXT\"",
    "\"END_ENTITY\"",
    "\"END_FUNCTION\"",
    "\"END_IF\"",
    "\"END_LOCAL\"",
    "\"END_MODEL\"",
    "\"END_PROCEDURE\"",
    "\"END_REPEAT\"",
    "\"END_RULE\"",
    "\"END_SCHEMA\"",
    "\"END_TYPE\"",
    "\"VALUE_IN\"",
    "\"VALUE_UNIQUE\"",
    "<INTEGER_LITERAL>",
    "<HEX_LITERAL>",
    "<HEX_DIGIT>",
    "<OCTAL_LITERAL>",
    "<REAL_LITERAL>",
    "<EXPONENT>",
    "<SIMPLE_STRING_LITERAL>",
    "<ESCAPED_CHAR>",
    "<PRINT_CHAR>",
    "<BINARY_LITERAL>",
    "<SIMPLE_ID>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\":\"",
    "\",\"",
    "\".\"",
    "\":=\"",
    "\">\"",
    "\"<\"",
    "\"<=\"",
    "\">=\"",
    "\"?\"",
    "\"**\"",
    "\"\\\\\"",
    "\"<>\"",
    "\"=\"",
    "\":<>:\"",
    "\":=:\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"||\"",
    "\"<*\"",
    "\"|\"",
  };

}
