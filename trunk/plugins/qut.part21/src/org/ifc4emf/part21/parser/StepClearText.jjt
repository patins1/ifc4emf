/*******************************************************************
 *
 * contents:	STEP Part 21 - clear text encoding parser
 *             to be used with JavaCC
 *
 *
 * history :
 * --------
 *   18 Aug 1999: Creation. Singva Ma <Singva.Ma@leg.ensieg.inpg.fr>. 
 * 
 ******************************************************************/

options {
   LOOKAHEAD = 1;
   STATIC = false;
   NODE_SCOPE_HOOK = true;
   UNICODE_INPUT = true;
}

PARSER_BEGIN(ClearTextReader)
package org.ifc4emf.part21.parser;

import java.io.*;
import java.util.*;
import org.ifc4emf.part21.loader.ImmediateConsumer;

public class ClearTextReader{

    public ImmediateConsumer immediateConsumer;

    void jjtreeOpenNodeScope(Node n)    {
    }
    void jjtreeCloseNodeScope(Node n)    {
       if (immediateConsumer!=null && immediateConsumer.consume(n))       {         
         jjtree.popNode();
       }    }
  

	public static void main(String args[]) 
	{
		
	   ClearTextReader parser;
				
		if (args.length == 0) 
		{
			System.out.println("ClearTextReader:  Reading from standard input . . .");
			parser = new ClearTextReader(System.in);
		} 
		else if (args.length == 1) 
		{
			System.out.println("ClearTextReader:  Reading from file " + args[0] + " . . .");
			try 
			{
				parser = new ClearTextReader(new java.io.FileInputStream(args[0]));
			} 
			catch (java.io.FileNotFoundException e) 
			{
				System.out.println("Express Parser:  File " + args[0] + " not found.");
				return;
			}			
		} 
		else 
		{
			System.out.println("ClearTextReader:  Usage is one of:");
			System.out.println("         java ClearTextReader < inputfile");
			System.out.println("OR");
			System.out.println("         java ClearTextReader inputfile");
			return;
		}
		try 
		{
			parser.syntax();
			System.out.println("ClearTextReader: source parsed successfully.");
			
		} 
		catch (ParseException e) 
		{
			System.out.println(e.getMessage());
			System.out.println("ClearTextReader:  Encountered errors during parse.");
		}
	} // end main

} // end class ClearTextReader

PARSER_END(ClearTextReader)



/************************************************
*************************************************
** Tokens
*************************************************
************************************************/

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
 <EMBEDDED_REMARK: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COLON: ":" >
| < COMMA: "," >
| < DOT: "."  >
| < EQ: "=" >
| < DOLLAR: "$" >
| < STAR: "*">
| < SLASH: "/">
}

TOKEN : {
   <INTEGER: (<SIGN>)? <DIGIT> (<DIGIT>)*>
|  <KEYWORD: <USER_DEFINED_KEYWORD> | <STANDARD_KEYWORD>>
|  <USER_DEFINED_KEYWORD: "!" <UPPER> (<UPPER> | <DIGIT>)*>
|  <STANDARD_KEYWORD: <UPPER> (<UPPER> | <DIGIT>)*>
|  <#SIGN: ["+", "-"]>
|  <REAL: (<SIGN>)? <DIGIT> (<DIGIT>)* <DOT> (<DIGIT>)* ("E" (<SIGN>)? <DIGIT> (<DIGIT>)* )?>
|  <NON_Q_CHAR: <SPECIAL> | <DIGIT> | " " | <LOWER> | <UPPER>>
|  <STRING: "'" (~["\\","'"] | "'s" | <NON_Q_CHAR> | <APOSTROPHE><APOSTROPHE> | <REVERSE_SOLIDUS><REVERSE_SOLIDUS> | <CONTROL_DIRECTIVE>)* "'">
|  <ENTITY_INSTANCE_NAME: "#" <DIGIT> (<DIGIT>)*>
|  <ENUMERATION: <DOT> <UPPER> (<UPPER> | <DIGIT>)* <DOT>>
|  <#HEX: ["0"-"9", "A"-"F"]>
|  <BINARY: "\"" ( "0" | "1" | "2" | "3" ) (<HEX>)* "\"">
}

TOKEN : {
   <#DIGIT: ["0"-"9"]>
|  <#LOWER: ["a"-"z"]>
|  <#UPPER: ["A"-"Z", "_"]>
|  <SPECIAL: "!" | "\"" | <STAR> | <DOLLAR> | "%" | "&" | <DOT> | "#" | "+" | <COMMA> | "-" | <LPAREN> | <RPAREN> | "?" | <SLASH> | <COLON> | <SEMICOLON> | "<" | <EQ> | ">" | "@" | <LBRACKET> | <RBRACKET> | <LBRACE> | "|" | <RBRACE> | "^" | "`">
|  <REVERSE_SOLIDUS: "\\">
|  <APOSTROPHE: "'">
|  <CHARACTER: " " | <DIGIT> | <LOWER> | <UPPER> | <SPECIAL> | <REVERSE_SOLIDUS> | <APOSTROPHE>>
}


TOKEN : {
   <CONTROL_DIRECTIVE: <PAGE> | <ALPHABET> | <EXTENDED2> | <EXTENDED4> | <ARBITRARY> >
|  <PAGE: <REVERSE_SOLIDUS> "S" <REVERSE_SOLIDUS> <CHARACTER>>
|  <ALPHABET: <REVERSE_SOLIDUS> "P" <UPPER> <REVERSE_SOLIDUS>>
|  <EXTENDED2: <REVERSE_SOLIDUS> "X2" <REVERSE_SOLIDUS> <HEX_TWO> (<HEX_TWO>)* <END_EXTENDED>>
|  <EXTENDED4: <REVERSE_SOLIDUS> "X4" <REVERSE_SOLIDUS> <HEX_FOUR> (<HEX_FOUR>)* <END_EXTENDED>>
|  <END_EXTENDED: <REVERSE_SOLIDUS> "X0" <REVERSE_SOLIDUS>>
|  <ARBITRARY: <REVERSE_SOLIDUS> "X" <REVERSE_SOLIDUS> <HEX_ONE>>
|  <HEX_ONE: <HEX> <HEX>>
|  <HEX_TWO: <HEX_ONE> <HEX_ONE>>
|  <HEX_FOUR: <HEX_TWO> <HEX_TWO>>
}



/************************************************
 * Grammar
 ***********************************************/

void exchange_file() : {}
{
   "ISO-10303-21;" 
	header_section() 
	data_section() 
	"END-ISO-10303-21"
}

void header_section() : {}
{
   "HEADER;" 
	header_entity() header_entity() header_entity() 
	[header_entity_list()]
	"ENDSEC;"
}

void header_entity_list() : {}
{
   header_entity() (header_entity())*
}

void header_entity() : {}
{
  <KEYWORD>
  <LPAREN> 
  [parameter_list()] 
  <RPAREN> 
  <SEMICOLON>
}

void parameter_list() #void: {}
{
   parameter() (<COMMA> parameter())*
}

void parameter() #void: {}
{
     typed_parameter()
	| untyped_parameter()
	| omitted_parameter()
}

void typed_parameter() : {Token t;}
{
  t=<KEYWORD> <LPAREN> parameter() <RPAREN>
  {    jjtThis.jjtSetValue(t.image);
  }
}


void untyped_parameter() : {Token t;}
{
    t=<DOLLAR>    {      //jjtThis.jjtSetValue(t.image);
      jjtThis.jjtSetValue(UnsetParameter.instance());
    }
  | t=<INTEGER>
 	{
      jjtThis.jjtSetValue(Integer.parseInt(t.image));
    }
  | t=<REAL>
 	{
      jjtThis.jjtSetValue(Double.parseDouble(t.image));
    }
  | t=<STRING>
 	{
      jjtThis.jjtSetValue(t.image.substring(1,t.image.length()-1));
    }
  | t=<ENTITY_INSTANCE_NAME>
 	{
      jjtThis.jjtSetValue(new ObjectReference(Integer.valueOf(t.image.substring(1))));
    }
  | t=<ENUMERATION>
 	{
      jjtThis.jjtSetValue(new EnumValue(t.image.substring(1,t.image.length()-1)));
    }
  | t=<BINARY>
 	{
      //jjtThis.jjtSetValue(t.image);
      throw new ParseException("Binaries not yet handled: " + t.image);
    }
  | list()
  
}

void omitted_parameter() : {}
{
  <STAR>
}

void list() : {}
{
  <LPAREN> [parameter() (<COMMA> parameter())*]  <RPAREN>

}

void data_section() : {}
{
  "DATA;" entity_instance_list() "ENDSEC;"
}

void entity_instance_list() : {}
{
   entity_instance() (entity_instance())*
}

void entity_instance() : { Token t; }
{
  t=<ENTITY_INSTANCE_NAME>
  {
    jjtThis.jjtSetValue(t.image);
  }
  <EQ> [scope()] (subsuper_record() | simple_record()) <SEMICOLON>
}

void scope() : {}
{
  "&SCOPE" entity_instance_list() "ENDSCOPE" [export_list()]
}

void export_list() : {}
{
  <SLASH> <ENTITY_INSTANCE_NAME> (<COMMA> <ENTITY_INSTANCE_NAME>)* <SLASH>
}

void simple_record() : { Token t; }
{
  t=<KEYWORD>  {
    jjtThis.jjtSetValue(t.image);  }
  <LPAREN> [ parameter_list() ] <RPAREN>
}

void subsuper_record() : {}
{
   <LPAREN> simple_record_list() <RPAREN>
}
 
void simple_record_list() : {}
{
   simple_record() (simple_record())*
}

ASTsyntax syntax() : {}
{
  exchange_file()
        {
          return jjtThis;
        }
}
